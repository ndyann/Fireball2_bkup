/// Code to track star in Elevation and Cross Elevation using MINT code for PCO.Edge

#include <stdio.h>
#include <iostream>
#include <cstdlib>
#include <cmath>

#include "zguide.hpp"

//FIRST Creates the camera and grabber objects to call their methods
#if CAMERA
//printf("CAMERA IS ENABLED");
CPco_cl_com camera;
CPco_me4_edge grabber;
#endif


int main (int argc, const char * argv[]){
   printf("Entering the z_guide program\n");
   //**********************************************************************************
   //Guiding with automatic 2 star selection
   //**********************************************************************************
   //Variable values that are required during the process
   unsigned int c_ok = NOTHING;			//Variable to store status with camera
   struct tm timeinfo;					//To build FITS name
   char time1[500],name[500],aux[500];		//To build FITS name
   uint16_t* p_img = NULL;                   //To store the raw image from the camera

   const int CamRows = 2160;			//Camera rows in 1x1 mode
   const int CamCols = 2560;			//Camera columns in 1x1 mode
   const uint16_t CamSat = 65535;		//Maximum pixel value (saturation)

   int StarSelect = 1;				//If 1 the program selects automatically a star
   int NegativeIm = 1;				//If 1 the image used is a negative and needs inversion

   if (StarSelect == 1){
/* In automatic mode the program does the following:
	1. Makes a long exposure frame
	2. Extracts stars from it, chooses the 2 brightests, shows in console their pixel location in the frame
	3. Sets windows around them and sets the camera for short exposure mode
	4. Enters in a loop, for each loop it gets a frame, slices the windows, uses the first window to compute E and CE errors
*/

   //This implementation gives me errors, need to verify later
   //Sets the SIGINT treatment. ctrl-c terminates program and closes connections
   //if (signal(SIGINT, terminate)==SIG_IGN)
   //  signal(SIGINT, SIG_IGN);
      //*************************************************************************************************************
      //1 Takes first long exposure image to identify potential sources in the frame. Saves it in TIFF if necessary
      //*************************************************************************************************************
      #if CAMERA
      //Starts the camera
      log(__FUNCTION__,OK,"Connect to camera");
      start_camera(camera,grabber);
      //Sets the exposure to long value to first identify many stars
      camera.PCO_SetDelayExposure(CAM_WAIT_FRAME, GUIDE_LONG_EXPOSURE);
      //Grabs a frame and stores it
      c_ok = -1;
      c_ok = grab_single(&grabber, &p_img);
      if(c_ok == OK){
         log(__FUNCTION__, OK, "Grabbed new frame successfully");
      }
      else{
         log(__FUNCTION__, OK, "Error: Could not grab new frame");
      }
      //If the image used is a negative (e.g. at the lab) it inverts it
      if(NegativeIm == 1){
         ImageInvert(p_img, CamRows*CamCols, CamSat);
         log(__FUNCTION__,OK,"Image inverted");
      }
      #endif  //MOVE endif TO WHERE IT MAKES SENSE
/*
      //Saves raw frame from camera in FITS file, gives log error messages if it fails
      #if FITS
      //Prepares the FITS file name
      log(__FUNCTION__,OK,"Forming filename using system time information");
      time_t rawtime;
      time(&rawtime);
      timeinfo = *localtime(&rawtime);
      strftime(time1, 500, (HOMEPATH"/imgs/%Y-%m-%d_%H-%M-%S_%%06d.fits"), &timeinfo);
      sprintf(name,time1,clock()%CLOCKS_PER_SEC);
      log(__FUNCTION__,OK,"Filename formed. Result: "+string(name));
      //Saves the image in a FITS file
      if(c_ok == OK) {
         uint16_t att;   //Number of attempts to save the image
         log(__FUNCTION__, OK, "Attempting to save image");
         for (c_ok = NOTHING, att = 0; c_ok != OK && ++att < MAX_RETRY; c_ok = save_ptr2fits(name,CamCols,CamRows,p_img));
         if(c_ok != OK){
            sprintf(aux,"Could not save image '%s' in %d tries",name,MAX_RETRY);
            log(__FUNCTION__,ERROR,aux);
         }
      }
      else{
         log(__FUNCTION__, OK, "Error: Could not grab new frame");
      }
      #endif
*/

      //**************************************************************************
      //2 Extracts the sources, picks 2 brightest to track and prepares window structure
      //**************************************************************************
      // To avoid picking stars from too near the border of the image, we clip it
      cout << "Starting source extraction using frame as pointer" << endl;
      int FrameMargin = 500;
      int FrameX = CamCols - 2 * FrameMargin;
      int FrameY = CamRows - 2 * FrameMargin;
	 uint16_t *frame = new uint16_t[FrameX*FrameY];  //NEED TO DELETE IT LATER!!
	 ImageWindow(p_img, frame, CamRows, CamCols, FrameMargin);
	 cout << "Cropped image has been created as is pointed by frame. Just for lab use\n";
/*
      // Saves clipped frame from camera in FITS file, gives log error messages if it fails
      #if FITS
      //Saves the image in a FITS file
      if(c_ok == OK) {
         uint16_t att;   //Number of attempts to save the image
         log(__FUNCTION__, OK, "Attempting to save image");
         for (c_ok = NOTHING, att = 0; c_ok != OK && ++att < MAX_RETRY; c_ok = save_ptr2fits("/home/salo/0.Jose/2.mintguider/0.Versions/2015.07.1/mint_camera_only/imgs/Framebig.fits",FrameX,FrameY,frame));
         if(c_ok != OK){
            sprintf(aux,"Could not save image '%s' in %d tries",name,MAX_RETRY);
            log(__FUNCTION__,ERROR,aux);
         }
      }
      else{
         log(__FUNCTION__, OK, "Error: Could not grab new frame");
      }
      #endif
*/
/*
      //DEBUG: just a check to see whether there are saturated pixels in the frame (erase later)
      uint16_t maxframe = 0;
      for (int i=0; i<FrameX*FrameY; i++){
         maxframe = max(maxframe, frame[i]);
      }
      cout << "Max value in frame = " << maxframe << ", and saturation value is " << CamSat << endl;
*/

      //blob extraction*********************************************************************************************************
	 cout << "Starting blob extraction ... \n";
      frameblob fblob(frame, FrameX, FrameY, 16, 1.0);    // creates a frameblob structure to store the blobs in the whole frame
      fblob.clearblobs();   //not necessary but better to clear blobs in case there are some from previous calls
      //sets search values IMPORTANT to see which ones to port to parameters.txt file
      fblob.set_satval(CamSat);    //pixel saturation level
      fblob.set_grid(100);         //size of grid, determines how many sources will be found (max 1 source per grid)
      fblob.set_cenbox(80);        //size of box to compute centroid. It has to be large enough to hold brightest star
      fblob.set_apbox(40);         //size of aperture box to compute source flux. It has to be large enough to hold brightest star
      fblob.set_threshold(5.0);    //threshold for detection (5 sigma now)
      fblob.set_disttol(50*50);    //maximum allowable distance betwee sources, now at 50 pixels
	 cout << "Source extraction parameters set \n";
      //proceeds with source extraction
      fblob.calc_mapstat();    		// calc map mean + count # saturated pixels each column
      fblob.calc_searchgrid();    	// find cells in search grid with source
      fblob.calc_centroid();    	// after search/flux, calculate centroids
      fblob.calc_flux();    		// sum flux in apertures, check if pointlike
      fblob.fix_multiple();    		// check for multiple sources within disttol and fix
      fblob.sortblobs();		// sorts blobs from highest to lowest flux

	 // I don't need the frame anymore, so I free the memory
	 delete [] frame;
	 
/*
      //DEBUG: how to check content of bloblist at each step
 	 cout<<"Let's check what we've found:\n";
      bloblist *pblob5;
      pblob5 = fblob.getblobs();
      cout << "After reordering" << endl;
      cout << "numblobs after removing multiple sources = " << fblob.Numblobs() << endl;
      cout << "Blob: " << pblob5->getx() << "   " << pblob5->gety() << "   " << pblob5->getflux() << endl;
      pblob5 = pblob5->getnextblob();
      cout << "Blob: " << pblob5->getx() << "   " << pblob5->gety() << "   " << pblob5->getflux() << endl;
      pblob5 = pblob5->getnextblob();
      cout << "Blob: " << pblob5->getx() << "   " << pblob5->gety() << "   " << pblob5->getflux() << endl;
*/
      cout << "Sources extracted from the initial long exposure = " << fblob.Numblobs() << endl;

      //window structure creation**********************************************************************************
	 cout << "Creating window structure to perform guidance...\n";
      static bloblist *pFrameBlob;
      pFrameBlob = fblob.getblobs();   //list of stars with x, y centroid coordinates and ordered by flux
      //Picks the brightest star to measure E and CE error, since we clipped the frame when we extracted the sources\
and the margin was larger than half a window, we do not need to check that the star is too close to the fov border
	 double first_old_x = pFrameBlob->getx();	 //Centroid x coordinate in clipped frame pixel coordinates
	 double first_old_y = pFrameBlob->gety();     //Centroid y coordinate in clipped frame pixel coordinates
	 cout << "Centroid clipped x = " << first_old_x << ", Centroid clipped y = " << first_old_y << endl;
	 //To do error calculations we will do full chip coordinates
	 first_old_x = first_old_x + FrameMargin;     //Centroid x coordinate in full frame pixel coordinates
	 first_old_y = first_old_y + FrameMargin;     //Centroid y coordinate in full frame pixel coordinates
	 cout << "Centroid x = " << first_old_x << ", Centroid y = " << first_old_y << endl;
	 //Now we compute the lower left corner reference for the window around the guiding star
	 const int windowSize = 100;
	 int first_x_ref = int(first_old_x) - windowSize / 2;
	 int first_y_ref = int(first_old_y) - windowSize / 2;
	 cout << "Window x = " << first_x_ref << ", Window y = " << first_y_ref << endl;
	 //*********************************************************************************************************
	 //3. Guiding loop
	 //Setting parameters and objects for guiding loop
	 int countmax = 3;
	 double first_new_x = 0.0;
	 double first_new_y = 0.0;
	 double error_x = 0.0;
	 double error_y = 0.0;
	 uint16_t *first_win = new uint16_t[windowSize*windowSize];
	 frameblob first_win_blob(first_win, windowSize, windowSize, 16, 1.0);  
	 static bloblist *pFirstWinBlob;
	 for (int count = 1; count < countmax; count++){
	 	//Grab a frame
	 	cout << "Grabbing new frame...\n";
	 	c_ok = -1;
      	c_ok = grab_single(&grabber, &p_img);
      	if(c_ok == OK){
         		log(__FUNCTION__, OK, "Grabbed new frame successfully");
     	 }
      	else{
         		log(__FUNCTION__, OK, "Error: Could not grab new frame");
      	}
      	//If the image used is a negative (e.g. at the lab) it inverts it
      	if(NegativeIm == 1){
         		ImageInvert(p_img, CamRows*CamCols, CamSat);
         		log(__FUNCTION__,OK,"Image inverted");
      	}
		cout << "... new frame grabbed\n";
	 	//Slice the window
		cout << "Slicing new frame into tracking window...\n";
		ImageWindow(p_img, first_win, CamRows, CamCols, windowSize, windowSize, first_x_ref, first_y_ref);
		cout << "... tracking window sliced\n";
	 	//Get the centroid coordinates
		cout << "Getting the new centroid position...\n";
		first_win_blob.clearblobs();   //not necessary but better to clear blobs in case there are some from previous calls

      	first_win_blob.set_satval(CamSat);    //pixel saturation level
      	first_win_blob.set_grid(100);         //size of grid, determines how many sources will be found (max 1 source per grid)
      	first_win_blob.set_cenbox(80);        //size of box to compute centroid. It has to be large enough to hold brightest star
      	first_win_blob.set_apbox(40);         //size of aperture box to compute source flux. It has to be large enough to hold brightest star
      	first_win_blob.set_threshold(5.0);    //threshold for detection (5 sigma now)
      	first_win_blob.set_disttol(50*50);    //maximum allowable distance betwee sources, now at 50 pixels

     	first_win_blob.calc_mapstat();    		// calc map mean + count # saturated pixels each column
      	first_win_blob.calc_searchgrid();    	// find cells in search grid with source
      	first_win_blob.calc_centroid();    	// after search/flux, calculate centroids
     	first_win_blob.calc_flux();    		// sum flux in apertures, check if pointlike
      	first_win_blob.fix_multiple();    		// check for multiple sources within disttol and fix
      	first_win_blob.sortblobs();		// sorts blobs from highest to lowest flux

		pFirstWinBlob = first_win_blob.getblobs();   //list of stars with x, y centroid coordinates and ordered by flux
	 	first_new_x = pFirstWinBlob->getx();	 //Centroid x coordinate in clipped frame pixel coordinates
	 	first_new_y = pFirstWinBlob->gety();
		
		first_new_x = first_new_x + first_x_ref; 
		first_new_y = first_new_y + first_y_ref;
		
		cout << "New centroid position: " << first_new_x << ", " << first_new_y << endl;

	 	//Express centroid coordinates in full frame pixel coordinates and compute errors in pixel coordinates
	 	error_x = first_new_x - first_old_x;
	 	error_y = first_new_y - first_old_y;
	 	//Output in console
	 	cout << "Count = " << count << ", x error = " << error_x << ", y error = " << error_y << endl;
	 
		first_old_x = first_new_x;
		first_old_y = first_new_y;

	 }

	 //I free the memory allocated to save the window 
	 delete [] first_win;
	

   }
   else{
      log(__FUNCTION__, OK, "Selected manual star guiding choice, not implemented yet");
   }

   cout << "Freeing resources and closing the camera" << endl;
   //Freeing dynamically allocated variables
   //p_img, where raw frames from camera go
   #if CAMERA

   if(p_img != NULL){
      log(__FUNCTION__, OK, "Freeing image buffer (Unverifiable)");
      free(p_img);
   }
   else{
      fprintf(stderr, "Could not free image buffer\n");
      fflush(stderr);
      log(__FUNCTION__, OK, "Error: Could not free image buffer: Image buffer was unallocated");
   }
   //frame, where clipped raw frames from camera go
   //delete [] frame;
   //frame = NULL;

//*/
   //Closing the camera and grabber
   log(__FUNCTION__,OK,"Close camera connection and free resources");
   if(close_camera(camera,grabber) == OK)
      log(__FUNCTION__,OK,"Closed camera");
   else
      log(__FUNCTION__,ERROR,"COULD NOT close camera");
   #endif

   printf("Exiting the z_guide program\n");

   return 0;
}
//*************************************************************************************************************************************************************
//*************************************************************************************************************************************************************
void ImageInvert(uint16_t *pImage, int ImSize, uint16_t MaxValue){
/* 
In the lab, I used a negative sky photograph for testing, this function
just inverts any image, to turn it back to a positive (dark sky, white sources).
- pImage is a pointer to the image, which PCOEdge5.5 stores as uint16_t
- Size is the number of pixels in the array pointed by pImage
- MaxValue is the saturation value of the image, for PCOEdge5.5 it is 65535
*/

  for (int element = 0; element < ImSize; element++){
    pImage[element] = MaxValue - pImage[element];
  }

}
//**************************************************************************************************************************************************************
//**************************************************************************************************************************************************************
void ImageWindow(uint16_t *pImage, uint16_t *pWindow, int nRows, int nCols, double x, double y, int sizeX, int sizeY, int origin_x, int origin_y){
/*
This function takes an image containedd in pImage, with nRows and nCols, and crops it to a square window
of side size centered in x and y in the original Image.
- nRows, nCols and size are pixels
- pImage is the pointer to the entry image
- pWindow is the pointer to the exit image
- x, y can be double (e.g. centroid coordinates)
*/
   if ((sizeY>nRows)||(sizeX>nCols)){
      cout << "Error: window size exceeds original image. Image left untouched" << endl;
      pWindow = pImage;
   }
   else {
      int x1, x2, y1, y2;
      //calculates the column range of the window
      x1 = round(max(0.0, x - sizeX/2.0));
      x2 = x1 + sizeX - 1;
      if (x2>=nCols){
         x2 = nCols - 1;
         x1 = x2 - sizeX + 1;
         if (x1<=0){
            x1 = 0;
         }
      }
      origin_x = x1;
      //calculates the row range of the window
      y1 = round(max(0.0, y - sizeY/2.0));
      y2 = y1 + sizeY - 1;
      if (y2>=nCols){
         y2 = nCols - 1;
         y1 = y2 - sizeY + 1;
         if (y1<=0){
            y1 = 0;
         }
      }
      origin_y = y1;
      //cout << "winref_x = " << origin_x << ", winref_y = " << origin_y << endl;
      //slices pImage to get pWindow
      int element = 0;
      for(int row = y1; row < y2 + 1 ; row++){
         for(int column = x1; column < x2 + 1; column++){
            pWindow[element] = pImage[row * nCols + column];
            element = element + 1;
         }
      }
   }
}
//*******************************************************************************************************************************************

//*******************************************************************************************************************************************
void ImageWindow(uint16_t *pImage, uint16_t *pWindow, int nRows, int nCols, int sizeX, int sizeY, int origin_x, int origin_y){
	/* This function takes as inputs 2 pointers, one to an image of size nRows x nCols and another to a memory space of size sizeX x sizeY
	it also takes the coordinates of the lower left corner of the window we want to create (origin_x, origin_y). It then stores the content
	of the window to the memory allocated and pointed by the pointer to the window
	*/
	//First resizes the window size to fit the image if necessary
	sizeX = min(sizeX, nCols - origin_x);
	sizeY = min(sizeY, nRows - origin_y);
	int element = 0;
	for (int row = origin_y; row < origin_y + sizeY; row++){
		for (int column = origin_x; column < origin_x + sizeX; column++){
			pWindow[element] = pImage[row * nCols + column];
			element = element + 1;
		}
	}

}

//******************************************************************************************************************************************
void ImageWindow(uint16_t *pImage, uint16_t *pWindow, int nRows, int nCols, int margin){
	/* This function takes as inputs 2 pointers, one to an image of size nRows x nCols and another to a memory space of size 
	(nRows - 2 * margin) x (nCols - 2 * margin) and clips the former into the later
	*/
	int element = 0;
	for (int row = margin; row < nRows - margin; row++){
		for (int column = margin; column < nCols - margin; column++){
			pWindow[element] = pImage[row * nCols + column];
			element = element + 1;
		}
	}
}









