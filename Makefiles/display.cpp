#include <vga.h>
#include <vgagl.h>

#define MAX(a,b) (a>b ? a: b)

static unsigned char font3[] =
{
0,0,0,0,0,0,0,0, //0 to 8
0,0,0,0,0,0,0,0, //8 to 16
0,0,0,0,0,0,0,0, //16 to 24
0,0,0,0,0,0,0,0, //24 to 32
63,252,63,252,192,3,192,3, //32 to 40
204,51,204,51,192,3,192,3, //40 to 48
207,243,207,243,192,3,192,3, //48 to 56
63,252,63,252,0,0,0,0, //56 to 64
63,252,63,252,255,255,255,255, //64 to 72
243,207,243,207,255,255,255,255, //72 to 80
240,15,240,15,255,255,255,255, //80 to 88
63,252,63,252,0,0,0,0, //88 to 96
15,60,15,60,63,255,63,255, //96 to 104
63,255,63,255,63,255,63,255, //104 to 112
15,252,15,252,3,240,3,240, //112 to 120
0,192,0,192,0,0,0,0, //120 to 128
0,192,0,192,3,240,3,240, //128 to 136
15,252,15,252,63,255,63,255, //136 to 144
15,252,15,252,3,240,3,240, //144 to 152
0,192,0,192,0,0,0,0, //152 to 160
3,240,3,240,3,240,3,240, //160 to 168
0,192,0,192,60,207,60,207, //168 to 176
63,255,63,255,60,207,60,207, //176 to 184
0,192,0,192,3,240,3,240, //184 to 192
0,192,0,192,3,240,3,240, //192 to 200
15,252,15,252,63,255,63,255, //200 to 208
15,252,15,252,0,192,0,192, //208 to 216
3,240,3,240,15,252,15,252, //216 to 224
0,0,0,0,0,0,0,0, //224 to 232
3,192,3,192,15,240,15,240, //232 to 240
15,240,15,240,3,192,3,192, //240 to 248
0,0,0,0,0,0,0,0, //248 to 256
255,255,255,255,255,255,255,255, //256 to 264
252,63,252,63,240,15,240,15, //264 to 272
240,15,240,15,252,63,252,63, //272 to 280
255,255,255,255,255,255,255,255, //280 to 288
0,0,0,0,15,240,15,240, //288 to 296
60,60,60,60,48,12,48,12, //296 to 304
48,12,48,12,60,60,60,60, //304 to 312
15,240,15,240,0,0,0,0, //312 to 320
255,255,255,255,240,15,240,15, //320 to 328
195,195,195,195,207,243,207,243, //328 to 336
207,243,207,243,195,195,195,195, //336 to 344
240,15,240,15,255,255,255,255, //344 to 352
0,255,0,255,0,63,0,63, //352 to 360
0,243,0,243,15,240,15,240, //360 to 368
60,60,60,60,60,60,60,60, //368 to 376
60,60,60,60,15,240,15,240, //376 to 384
15,240,15,240,60,60,60,60, //384 to 392
60,60,60,60,60,60,60,60, //392 to 400
15,240,15,240,3,192,3,192, //400 to 408
63,252,63,252,3,192,3,192, //408 to 416
15,0,15,0,15,192,15,192, //416 to 424
15,240,15,240,15,60,15,60, //424 to 432
15,48,15,48,63,0,63,0, //432 to 440
255,0,255,0,252,0,252,0, //440 to 448
63,255,63,255,60,15,60,15, //448 to 456
63,255,63,255,60,15,60,15, //456 to 464
60,15,60,15,60,63,60,63, //464 to 472
252,60,252,60,240,0,240,0, //472 to 480
3,192,3,192,243,207,243,207, //480 to 488
63,252,63,252,60,60,60,60, //488 to 496
60,60,60,60,63,252,63,252, //496 to 504
243,207,243,207,3,192,3,192, //504 to 512
48,0,48,0,63,0,63,0, //512 to 520
63,240,63,240,63,255,63,255, //520 to 528
63,240,63,240,63,0,63,0, //528 to 536
48,0,48,0,0,0,0,0, //536 to 544
0,3,0,3,0,63,0,63, //544 to 552
3,255,3,255,63,255,63,255, //552 to 560
3,255,3,255,0,63,0,63, //560 to 568
0,3,0,3,0,0,0,0, //568 to 576
3,192,3,192,15,240,15,240, //576 to 584
63,252,63,252,3,192,3,192, //584 to 592
3,192,3,192,63,252,63,252, //592 to 600
15,240,15,240,3,192,3,192, //600 to 608
60,60,60,60,60,60,60,60, //608 to 616
60,60,60,60,60,60,60,60, //616 to 624
60,60,60,60,0,0,0,0, //624 to 632
60,60,60,60,0,0,0,0, //632 to 640
15,255,15,255,63,204,63,204, //640 to 648
63,204,63,204,15,204,15,204, //648 to 656
0,204,0,204,0,204,0,204, //656 to 664
0,204,0,204,0,0,0,0, //664 to 672
3,252,3,252,15,15,15,15, //672 to 680
3,240,3,240,15,60,15,60, //680 to 688
15,60,15,60,3,240,3,240, //688 to 696
60,60,60,60,15,240,15,240, //696 to 704
0,0,0,0,0,0,0,0, //704 to 712
0,0,0,0,0,0,0,0, //712 to 720
63,252,63,252,63,252,63,252, //720 to 728
63,252,63,252,0,0,0,0, //728 to 736
3,192,3,192,15,240,15,240, //736 to 744
63,252,63,252,3,192,3,192, //744 to 752
63,252,63,252,15,240,15,240, //752 to 760
3,192,3,192,63,252,63,252, //760 to 768
3,192,3,192,15,240,15,240, //768 to 776
63,252,63,252,3,192,3,192, //776 to 784
3,192,3,192,3,192,3,192, //784 to 792
3,192,3,192,0,0,0,0, //792 to 800
3,192,3,192,3,192,3,192, //800 to 808
3,192,3,192,3,192,3,192, //808 to 816
63,252,63,252,15,240,15,240, //816 to 824
3,192,3,192,0,0,0,0, //824 to 832
0,0,0,0,0,240,0,240, //832 to 840
0,252,0,252,63,255,63,255, //840 to 848
0,252,0,252,0,240,0,240, //848 to 856
0,0,0,0,0,0,0,0, //856 to 864
0,0,0,0,3,192,3,192, //864 to 872
15,192,15,192,63,255,63,255, //872 to 880
15,192,15,192,3,192,3,192, //880 to 888
0,0,0,0,0,0,0,0, //888 to 896
0,0,0,0,0,0,0,0, //896 to 904
60,0,60,0,60,0,60,0, //904 to 912
60,0,60,0,63,255,63,255, //912 to 920
0,0,0,0,0,0,0,0, //920 to 928
0,0,0,0,12,48,12,48, //928 to 936
60,60,60,60,255,255,255,255, //936 to 944
60,60,60,60,12,48,12,48, //944 to 952
0,0,0,0,0,0,0,0, //952 to 960
0,0,0,0,3,192,3,192, //960 to 968
15,240,15,240,63,252,63,252, //968 to 976
255,255,255,255,255,255,255,255, //976 to 984
0,0,0,0,0,0,0,0, //984 to 992
0,0,0,0,255,255,255,255, //992 to 1000
255,255,255,255,63,252,63,252, //1000 to 1008
15,240,15,240,3,192,3,192, //1008 to 1016
0,0,0,0,0,0,0,0, //1016 to 1024
0,0,0,0,0,0,0,0, //1024 to 1032
0,0,0,0,0,0,0,0, //1032 to 1040
0,0,0,0,0,0,0,0, //1040 to 1048
0,0,0,0,0,0,0,0, //1048 to 1056
3,192,3,192,3,192,3,192, //1056 to 1064
3,192,3,192,3,192,3,192, //1064 to 1072
3,192,3,192,0,0,0,0, //1072 to 1080
3,192,3,192,0,0,0,0, //1080 to 1088
60,60,60,60,60,60,60,60, //1088 to 1096
60,60,60,60,0,0,0,0, //1096 to 1104
0,0,0,0,0,0,0,0, //1104 to 1112
0,0,0,0,0,0,0,0, //1112 to 1120
60,240,60,240,60,240,60,240, //1120 to 1128
255,252,255,252,60,240,60,240, //1128 to 1136
255,252,255,252,60,240,60,240, //1136 to 1144
60,240,60,240,0,0,0,0, //1144 to 1152
3,0,3,0,63,240,63,240, //1152 to 1160
243,0,243,0,63,240,63,240, //1160 to 1168
3,60,3,60,63,240,63,240, //1168 to 1176
3,0,3,0,0,0,0,0, //1176 to 1184
0,0,0,0,240,60,240,60, //1184 to 1192
240,240,240,240,3,192,3,192, //1192 to 1200
15,0,15,0,60,60,60,60, //1200 to 1208
240,60,240,60,0,0,0,0, //1208 to 1216
15,192,15,192,60,240,60,240, //1216 to 1224
15,192,15,192,63,60,63,60, //1224 to 1232
243,240,243,240,240,240,240,240, //1232 to 1240
63,60,63,60,0,0,0,0, //1240 to 1248
3,192,3,192,3,192,3,192, //1248 to 1256
15,0,15,0,0,0,0,0, //1256 to 1264
0,0,0,0,0,0,0,0, //1264 to 1272
0,0,0,0,0,0,0,0, //1272 to 1280
0,240,0,240,3,192,3,192, //1280 to 1288
15,0,15,0,15,0,15,0, //1288 to 1296
15,0,15,0,3,192,3,192, //1296 to 1304
0,240,0,240,0,0,0,0, //1304 to 1312
15,0,15,0,3,192,3,192, //1312 to 1320
0,240,0,240,0,240,0,240, //1320 to 1328
0,240,0,240,3,192,3,192, //1328 to 1336
15,0,15,0,0,0,0,0, //1336 to 1344
0,0,0,0,60,240,60,240, //1344 to 1352
15,192,15,192,255,252,255,252, //1352 to 1360
15,192,15,192,60,240,60,240, //1360 to 1368
0,0,0,0,0,0,0,0, //1368 to 1376
0,0,0,0,3,192,3,192, //1376 to 1384
3,192,3,192,63,252,63,252, //1384 to 1392
3,192,3,192,3,192,3,192, //1392 to 1400
0,0,0,0,0,0,0,0, //1400 to 1408
0,0,0,0,0,0,0,0, //1408 to 1416
0,0,0,0,0,0,0,0, //1416 to 1424
0,0,0,0,3,192,3,192, //1424 to 1432
3,192,3,192,15,0,15,0, //1432 to 1440
0,0,0,0,0,0,0,0, //1440 to 1448
0,0,0,0,63,252,63,252, //1448 to 1456
0,0,0,0,0,0,0,0, //1456 to 1464
0,0,0,0,0,0,0,0, //1464 to 1472
0,0,0,0,0,0,0,0, //1472 to 1480
0,0,0,0,0,0,0,0, //1480 to 1488
0,0,0,0,15,0,15,0, //1488 to 1496
15,0,15,0,0,0,0,0, //1496 to 1504
0,0,0,0,0,60,0,60, //1504 to 1512
0,240,0,240,3,192,3,192, //1512 to 1520
15,0,15,0,60,0,60,0, //1520 to 1528
240,0,240,0,0,0,0,0, //1528 to 1536
15,240,15,240,60,60,60,60, //1536 to 1544
60,252,60,252,63,252,63,252, //1544 to 1552
63,60,63,60,60,60,60,60, //1552 to 1560
15,240,15,240,0,0,0,0, //1560 to 1568
0,240,0,240,3,240,3,240, //1568 to 1576
15,240,15,240,0,240,0,240, //1576 to 1584
0,240,0,240,0,240,0,240, //1584 to 1592
0,240,0,240,0,0,0,0, //1592 to 1600
15,240,15,240,60,60,60,60, //1600 to 1608
0,60,0,60,3,240,3,240, //1608 to 1616
15,0,15,0,60,0,60,0, //1616 to 1624
63,252,63,252,0,0,0,0, //1624 to 1632
15,240,15,240,60,60,60,60, //1632 to 1640
0,60,0,60,3,240,3,240, //1640 to 1648
0,60,0,60,60,60,60,60, //1648 to 1656
15,240,15,240,0,0,0,0, //1656 to 1664
3,240,3,240,15,240,15,240, //1664 to 1672
60,240,60,240,240,240,240,240, //1672 to 1680
255,252,255,252,0,240,0,240, //1680 to 1688
0,240,0,240,0,0,0,0, //1688 to 1696
63,252,63,252,60,0,60,0, //1696 to 1704
60,0,60,0,63,240,63,240, //1704 to 1712
0,60,0,60,60,60,60,60, //1712 to 1720
15,240,15,240,0,0,0,0, //1720 to 1728
15,240,15,240,60,0,60,0, //1728 to 1736
60,0,60,0,63,240,63,240, //1736 to 1744
60,60,60,60,60,60,60,60, //1744 to 1752
15,240,15,240,0,0,0,0, //1752 to 1760
63,252,63,252,0,60,0,60, //1760 to 1768
0,60,0,60,0,240,0,240, //1768 to 1776
3,192,3,192,15,0,15,0, //1776 to 1784
15,0,15,0,0,0,0,0, //1784 to 1792
15,240,15,240,60,60,60,60, //1792 to 1800
60,60,60,60,15,240,15,240, //1800 to 1808
60,60,60,60,60,60,60,60, //1808 to 1816
15,240,15,240,0,0,0,0, //1816 to 1824
15,240,15,240,60,60,60,60, //1824 to 1832
60,60,60,60,15,252,15,252, //1832 to 1840
0,60,0,60,0,60,0,60, //1840 to 1848
15,240,15,240,0,0,0,0, //1848 to 1856
0,0,0,0,15,0,15,0, //1856 to 1864
15,0,15,0,0,0,0,0, //1864 to 1872
0,0,0,0,15,0,15,0, //1872 to 1880
15,0,15,0,0,0,0,0, //1880 to 1888
0,0,0,0,3,192,3,192, //1888 to 1896
3,192,3,192,0,0,0,0, //1896 to 1904
0,0,0,0,3,192,3,192, //1904 to 1912
3,192,3,192,15,0,15,0, //1912 to 1920
0,240,0,240,3,192,3,192, //1920 to 1928
15,0,15,0,60,0,60,0, //1928 to 1936
15,0,15,0,3,192,3,192, //1936 to 1944
0,240,0,240,0,0,0,0, //1944 to 1952
0,0,0,0,0,0,0,0, //1952 to 1960
63,252,63,252,0,0,0,0, //1960 to 1968
0,0,0,0,63,252,63,252, //1968 to 1976
0,0,0,0,0,0,0,0, //1976 to 1984
15,0,15,0,3,192,3,192, //1984 to 1992
0,240,0,240,0,60,0,60, //1992 to 2000
0,240,0,240,3,192,3,192, //2000 to 2008
15,0,15,0,0,0,0,0, //2008 to 2016
15,240,15,240,60,60,60,60, //2016 to 2024
0,60,0,60,0,240,0,240, //2024 to 2032
3,192,3,192,0,0,0,0, //2032 to 2040
3,192,3,192,0,0,0,0, //2040 to 2048
15,240,15,240,60,60,60,60, //2048 to 2056
60,252,60,252,60,252,60,252, //2056 to 2064
60,240,60,240,60,0,60,0, //2064 to 2072
15,240,15,240,0,0,0,0, //2072 to 2080
3,192,3,192,15,240,15,240, //2080 to 2088
60,60,60,60,60,60,60,60, //2088 to 2096
63,252,63,252,60,60,60,60, //2096 to 2104
60,60,60,60,0,0,0,0, //2104 to 2112
63,240,63,240,60,60,60,60, //2112 to 2120
60,60,60,60,63,240,63,240, //2120 to 2128
60,60,60,60,60,60,60,60, //2128 to 2136
63,240,63,240,0,0,0,0, //2136 to 2144
15,240,15,240,60,60,60,60, //2144 to 2152
60,0,60,0,60,0,60,0, //2152 to 2160
60,0,60,0,60,60,60,60, //2160 to 2168
15,240,15,240,0,0,0,0, //2168 to 2176
63,240,63,240,60,60,60,60, //2176 to 2184
60,60,60,60,60,60,60,60, //2184 to 2192
60,60,60,60,60,60,60,60, //2192 to 2200
63,240,63,240,0,0,0,0, //2200 to 2208
63,252,63,252,60,0,60,0, //2208 to 2216
60,0,60,0,63,240,63,240, //2216 to 2224
60,0,60,0,60,0,60,0, //2224 to 2232
63,252,63,252,0,0,0,0, //2232 to 2240
63,252,63,252,60,0,60,0, //2240 to 2248
60,0,60,0,63,240,63,240, //2248 to 2256
60,0,60,0,60,0,60,0, //2256 to 2264
60,0,60,0,0,0,0,0, //2264 to 2272
15,240,15,240,60,60,60,60, //2272 to 2280
60,0,60,0,60,252,60,252, //2280 to 2288
60,60,60,60,60,60,60,60, //2288 to 2296
15,240,15,240,0,0,0,0, //2296 to 2304
60,60,60,60,60,60,60,60, //2304 to 2312
60,60,60,60,63,252,63,252, //2312 to 2320
60,60,60,60,60,60,60,60, //2320 to 2328
60,60,60,60,0,0,0,0, //2328 to 2336
15,240,15,240,3,192,3,192, //2336 to 2344
3,192,3,192,3,192,3,192, //2344 to 2352
3,192,3,192,3,192,3,192, //2352 to 2360
15,240,15,240,0,0,0,0, //2360 to 2368
0,60,0,60,0,60,0,60, //2368 to 2376
0,60,0,60,0,60,0,60, //2376 to 2384
60,60,60,60,60,60,60,60, //2384 to 2392
15,240,15,240,0,0,0,0, //2392 to 2400
60,60,60,60,60,240,60,240, //2400 to 2408
63,192,63,192,63,0,63,0, //2408 to 2416
63,192,63,192,60,240,60,240, //2416 to 2424
60,60,60,60,0,0,0,0, //2424 to 2432
60,0,60,0,60,0,60,0, //2432 to 2440
60,0,60,0,60,0,60,0, //2440 to 2448
60,0,60,0,60,0,60,0, //2448 to 2456
63,252,63,252,0,0,0,0, //2456 to 2464
240,60,240,60,252,252,252,252, //2464 to 2472
255,252,255,252,243,60,243,60, //2472 to 2480
240,60,240,60,240,60,240,60, //2480 to 2488
240,60,240,60,0,0,0,0, //2488 to 2496
60,60,60,60,63,60,63,60, //2496 to 2504
63,252,63,252,60,252,60,252, //2504 to 2512
60,60,60,60,60,60,60,60, //2512 to 2520
60,60,60,60,0,0,0,0, //2520 to 2528
15,240,15,240,60,60,60,60, //2528 to 2536
60,60,60,60,60,60,60,60, //2536 to 2544
60,60,60,60,60,60,60,60, //2544 to 2552
15,240,15,240,0,0,0,0, //2552 to 2560
63,240,63,240,60,60,60,60, //2560 to 2568
60,60,60,60,63,240,63,240, //2568 to 2576
60,0,60,0,60,0,60,0, //2576 to 2584
60,0,60,0,0,0,0,0, //2584 to 2592
15,240,15,240,60,60,60,60, //2592 to 2600
60,60,60,60,60,60,60,60, //2600 to 2608
60,60,60,60,60,252,60,252, //2608 to 2616
15,240,15,240,0,60,0,60, //2616 to 2624
63,240,63,240,60,60,60,60, //2624 to 2632
60,60,60,60,63,240,63,240, //2632 to 2640
60,60,60,60,60,60,60,60, //2640 to 2648
60,60,60,60,0,0,0,0, //2648 to 2656
15,240,15,240,60,60,60,60, //2656 to 2664
60,0,60,0,15,240,15,240, //2664 to 2672
0,60,0,60,60,60,60,60, //2672 to 2680
15,240,15,240,0,0,0,0, //2680 to 2688
63,252,63,252,3,192,3,192, //2688 to 2696
3,192,3,192,3,192,3,192, //2696 to 2704
3,192,3,192,3,192,3,192, //2704 to 2712
3,192,3,192,0,0,0,0, //2712 to 2720
60,60,60,60,60,60,60,60, //2720 to 2728
60,60,60,60,60,60,60,60, //2728 to 2736
60,60,60,60,60,60,60,60, //2736 to 2744
15,240,15,240,0,0,0,0, //2744 to 2752
60,60,60,60,60,60,60,60, //2752 to 2760
60,60,60,60,60,60,60,60, //2760 to 2768
60,60,60,60,15,240,15,240, //2768 to 2776
3,192,3,192,0,0,0,0, //2776 to 2784
240,60,240,60,240,60,240,60, //2784 to 2792
240,60,240,60,243,60,243,60, //2792 to 2800
255,252,255,252,252,252,252,252, //2800 to 2808
240,60,240,60,0,0,0,0, //2808 to 2816
60,60,60,60,60,60,60,60, //2816 to 2824
15,240,15,240,3,192,3,192, //2824 to 2832
15,240,15,240,60,60,60,60, //2832 to 2840
60,60,60,60,0,0,0,0, //2840 to 2848
60,60,60,60,60,60,60,60, //2848 to 2856
60,60,60,60,15,240,15,240, //2856 to 2864
3,192,3,192,3,192,3,192, //2864 to 2872
3,192,3,192,0,0,0,0, //2872 to 2880
63,252,63,252,0,60,0,60, //2880 to 2888
0,240,0,240,3,192,3,192, //2888 to 2896
15,0,15,0,60,0,60,0, //2896 to 2904
63,252,63,252,0,0,0,0, //2904 to 2912
15,240,15,240,15,0,15,0, //2912 to 2920
15,0,15,0,15,0,15,0, //2920 to 2928
15,0,15,0,15,0,15,0, //2928 to 2936
15,240,15,240,0,0,0,0, //2936 to 2944
0,0,0,0,240,0,240,0, //2944 to 2952
60,0,60,0,15,0,15,0, //2952 to 2960
3,192,3,192,0,240,0,240, //2960 to 2968
0,60,0,60,0,0,0,0, //2968 to 2976
15,240,15,240,0,240,0,240, //2976 to 2984
0,240,0,240,0,240,0,240, //2984 to 2992
0,240,0,240,0,240,0,240, //2992 to 3000
15,240,15,240,0,0,0,0, //3000 to 3008
3,192,3,192,15,240,15,240, //3008 to 3016
60,60,60,60,0,0,0,0, //3016 to 3024
0,0,0,0,0,0,0,0, //3024 to 3032
0,0,0,0,0,0,0,0, //3032 to 3040
0,0,0,0,0,0,0,0, //3040 to 3048
0,0,0,0,0,0,0,0, //3048 to 3056
0,0,0,0,0,0,0,0, //3056 to 3064
0,0,0,0,255,255,255,255, //3064 to 3072
3,192,3,192,3,192,3,192, //3072 to 3080
0,240,0,240,0,0,0,0, //3080 to 3088
0,0,0,0,0,0,0,0, //3088 to 3096
0,0,0,0,0,0,0,0, //3096 to 3104
0,0,0,0,0,0,0,0, //3104 to 3112
15,240,15,240,0,60,0,60, //3112 to 3120
15,252,15,252,60,60,60,60, //3120 to 3128
15,252,15,252,0,0,0,0, //3128 to 3136
60,0,60,0,60,0,60,0, //3136 to 3144
60,0,60,0,63,240,63,240, //3144 to 3152
60,60,60,60,60,60,60,60, //3152 to 3160
63,240,63,240,0,0,0,0, //3160 to 3168
0,0,0,0,0,0,0,0, //3168 to 3176
15,240,15,240,60,60,60,60, //3176 to 3184
60,0,60,0,60,60,60,60, //3184 to 3192
15,240,15,240,0,0,0,0, //3192 to 3200
0,60,0,60,0,60,0,60, //3200 to 3208
0,60,0,60,15,252,15,252, //3208 to 3216
60,60,60,60,60,60,60,60, //3216 to 3224
15,252,15,252,0,0,0,0, //3224 to 3232
0,0,0,0,0,0,0,0, //3232 to 3240
15,240,15,240,60,60,60,60, //3240 to 3248
63,252,63,252,60,0,60,0, //3248 to 3256
15,252,15,252,0,0,0,0, //3256 to 3264
3,240,3,240,15,60,15,60, //3264 to 3272
15,0,15,0,63,240,63,240, //3272 to 3280
15,0,15,0,15,0,15,0, //3280 to 3288
15,0,15,0,0,0,0,0, //3288 to 3296
0,0,0,0,0,0,0,0, //3296 to 3304
15,252,15,252,60,60,60,60, //3304 to 3312
60,60,60,60,15,252,15,252, //3312 to 3320
0,60,0,60,15,240,15,240, //3320 to 3328
60,0,60,0,60,0,60,0, //3328 to 3336
63,240,63,240,60,60,60,60, //3336 to 3344
60,60,60,60,60,60,60,60, //3344 to 3352
60,60,60,60,0,0,0,0, //3352 to 3360
3,192,3,192,0,0,0,0, //3360 to 3368
3,192,3,192,3,192,3,192, //3368 to 3376
3,192,3,192,3,192,3,192, //3376 to 3384
3,192,3,192,0,0,0,0, //3384 to 3392
0,240,0,240,0,0,0,0, //3392 to 3400
0,240,0,240,0,240,0,240, //3400 to 3408
0,240,0,240,0,240,0,240, //3408 to 3416
60,240,60,240,15,192,15,192, //3416 to 3424
60,0,60,0,60,0,60,0, //3424 to 3432
60,60,60,60,60,240,60,240, //3432 to 3440
63,192,63,192,60,240,60,240, //3440 to 3448
60,60,60,60,0,0,0,0, //3448 to 3456
15,0,15,0,15,0,15,0, //3456 to 3464
15,0,15,0,15,0,15,0, //3464 to 3472
15,0,15,0,15,0,15,0, //3472 to 3480
3,192,3,192,0,0,0,0, //3480 to 3488
0,0,0,0,0,0,0,0, //3488 to 3496
252,240,252,240,255,252,255,252, //3496 to 3504
243,60,243,60,243,60,243,60, //3504 to 3512
240,60,240,60,0,0,0,0, //3512 to 3520
0,0,0,0,0,0,0,0, //3520 to 3528
63,240,63,240,60,60,60,60, //3528 to 3536
60,60,60,60,60,60,60,60, //3536 to 3544
60,60,60,60,0,0,0,0, //3544 to 3552
0,0,0,0,0,0,0,0, //3552 to 3560
15,240,15,240,60,60,60,60, //3560 to 3568
60,60,60,60,60,60,60,60, //3568 to 3576
15,240,15,240,0,0,0,0, //3576 to 3584
0,0,0,0,0,0,0,0, //3584 to 3592
63,240,63,240,60,60,60,60, //3592 to 3600
60,60,60,60,63,240,63,240, //3600 to 3608
60,0,60,0,60,0,60,0, //3608 to 3616
0,0,0,0,0,0,0,0, //3616 to 3624
15,252,15,252,60,60,60,60, //3624 to 3632
60,60,60,60,15,252,15,252, //3632 to 3640
0,60,0,60,0,60,0,60, //3640 to 3648
0,0,0,0,0,0,0,0, //3648 to 3656
63,240,63,240,60,60,60,60, //3656 to 3664
60,0,60,0,60,0,60,0, //3664 to 3672
60,0,60,0,0,0,0,0, //3672 to 3680
0,0,0,0,0,0,0,0, //3680 to 3688
15,252,15,252,60,0,60,0, //3688 to 3696
15,240,15,240,0,60,0,60, //3696 to 3704
63,240,63,240,0,0,0,0, //3704 to 3712
15,0,15,0,15,0,15,0, //3712 to 3720
63,240,63,240,15,0,15,0, //3720 to 3728
15,0,15,0,15,60,15,60, //3728 to 3736
3,240,3,240,0,0,0,0, //3736 to 3744
0,0,0,0,0,0,0,0, //3744 to 3752
60,60,60,60,60,60,60,60, //3752 to 3760
60,60,60,60,60,60,60,60, //3760 to 3768
15,252,15,252,0,0,0,0, //3768 to 3776
0,0,0,0,0,0,0,0, //3776 to 3784
60,60,60,60,60,60,60,60, //3784 to 3792
60,60,60,60,15,240,15,240, //3792 to 3800
3,192,3,192,0,0,0,0, //3800 to 3808
0,0,0,0,0,0,0,0, //3808 to 3816
240,60,240,60,243,60,243,60, //3816 to 3824
255,252,255,252,252,252,252,252, //3824 to 3832
48,48,48,48,0,0,0,0, //3832 to 3840
0,0,0,0,0,0,0,0, //3840 to 3848
60,60,60,60,15,240,15,240, //3848 to 3856
3,192,3,192,15,240,15,240, //3856 to 3864
60,60,60,60,0,0,0,0, //3864 to 3872
0,0,0,0,0,0,0,0, //3872 to 3880
60,60,60,60,60,60,60,60, //3880 to 3888
60,60,60,60,15,252,15,252, //3888 to 3896
0,60,0,60,15,240,15,240, //3896 to 3904
0,0,0,0,0,0,0,0, //3904 to 3912
63,252,63,252,0,240,0,240, //3912 to 3920
3,192,3,192,15,0,15,0, //3920 to 3928
63,252,63,252,0,0,0,0, //3928 to 3936
3,240,3,240,15,0,15,0, //3936 to 3944
15,0,15,0,60,0,60,0, //3944 to 3952
15,0,15,0,15,0,15,0, //3952 to 3960
3,240,3,240,0,0,0,0, //3960 to 3968
3,192,3,192,3,192,3,192, //3968 to 3976
3,192,3,192,3,192,3,192, //3976 to 3984
3,192,3,192,3,192,3,192, //3984 to 3992
3,192,3,192,0,0,0,0, //3992 to 4000
15,192,15,192,0,240,0,240, //4000 to 4008
0,240,0,240,0,60,0,60, //4008 to 4016
0,240,0,240,0,240,0,240, //4016 to 4024
15,192,15,192,0,0,0,0, //4024 to 4032
63,60,63,60,243,240,243,240, //4032 to 4040
0,0,0,0,0,0,0,0, //4040 to 4048
0,0,0,0,0,0,0,0, //4048 to 4056
0,0,0,0,0,0,0,0, //4056 to 4064
0,0,0,0,0,0,0,0, //4064 to 4072
3,192,3,192,15,240,15,240, //4072 to 4080
60,60,60,60,60,60,60,60, //4080 to 4088
63,252,63,252,0,0,0,0, //4088 to 4096
15,240,15,240,60,60,60,60, //4096 to 4104
60,0,60,0,60,0,60,0, //4104 to 4112
60,60,60,60,15,240,15,240, //4112 to 4120
3,192,3,192,15,0,15,0, //4120 to 4128
60,60,60,60,0,0,0,0, //4128 to 4136
60,60,60,60,60,60,60,60, //4136 to 4144
60,60,60,60,60,60,60,60, //4144 to 4152
15,252,15,252,0,0,0,0, //4152 to 4160
0,252,0,252,0,0,0,0, //4160 to 4168
15,240,15,240,60,60,60,60, //4168 to 4176
63,252,63,252,60,0,60,0, //4176 to 4184
15,240,15,240,0,0,0,0, //4184 to 4192
15,240,15,240,60,60,60,60, //4192 to 4200
15,240,15,240,0,60,0,60, //4200 to 4208
15,252,15,252,60,60,60,60, //4208 to 4216
15,252,15,252,0,0,0,0, //4216 to 4224
60,60,60,60,0,0,0,0, //4224 to 4232
15,240,15,240,0,60,0,60, //4232 to 4240
15,252,15,252,60,60,60,60, //4240 to 4248
15,252,15,252,0,0,0,0, //4248 to 4256
63,0,63,0,0,0,0,0, //4256 to 4264
15,240,15,240,0,60,0,60, //4264 to 4272
15,252,15,252,60,60,60,60, //4272 to 4280
15,252,15,252,0,0,0,0, //4280 to 4288
3,192,3,192,3,192,3,192, //4288 to 4296
15,240,15,240,0,60,0,60, //4296 to 4304
15,252,15,252,60,60,60,60, //4304 to 4312
15,252,15,252,0,0,0,0, //4312 to 4320
0,0,0,0,0,0,0,0, //4320 to 4328
15,252,15,252,60,0,60,0, //4328 to 4336
60,0,60,0,15,252,15,252, //4336 to 4344
3,192,3,192,15,0,15,0, //4344 to 4352
15,240,15,240,60,60,60,60, //4352 to 4360
15,240,15,240,60,60,60,60, //4360 to 4368
63,252,63,252,60,0,60,0, //4368 to 4376
15,240,15,240,0,0,0,0, //4376 to 4384
60,60,60,60,0,0,0,0, //4384 to 4392
15,240,15,240,60,60,60,60, //4392 to 4400
63,252,63,252,60,0,60,0, //4400 to 4408
15,240,15,240,0,0,0,0, //4408 to 4416
63,0,63,0,0,0,0,0, //4416 to 4424
15,240,15,240,60,60,60,60, //4424 to 4432
63,252,63,252,60,0,60,0, //4432 to 4440
15,240,15,240,0,0,0,0, //4440 to 4448
60,60,60,60,0,0,0,0, //4448 to 4456
3,192,3,192,3,192,3,192, //4456 to 4464
3,192,3,192,3,192,3,192, //4464 to 4472
3,192,3,192,0,0,0,0, //4472 to 4480
15,240,15,240,60,60,60,60, //4480 to 4488
3,192,3,192,3,192,3,192, //4488 to 4496
3,192,3,192,3,192,3,192, //4496 to 4504
3,192,3,192,0,0,0,0, //4504 to 4512
63,0,63,0,0,0,0,0, //4512 to 4520
3,192,3,192,3,192,3,192, //4520 to 4528
3,192,3,192,3,192,3,192, //4528 to 4536
3,192,3,192,0,0,0,0, //4536 to 4544
240,60,240,60,15,192,15,192, //4544 to 4552
60,240,60,240,240,60,240,60, //4552 to 4560
255,252,255,252,240,60,240,60, //4560 to 4568
240,60,240,60,0,0,0,0, //4568 to 4576
3,192,3,192,3,192,3,192, //4576 to 4584
0,0,0,0,15,240,15,240, //4584 to 4592
60,60,60,60,63,252,63,252, //4592 to 4600
60,60,60,60,0,0,0,0, //4600 to 4608
0,252,0,252,0,0,0,0, //4608 to 4616
63,240,63,240,60,0,60,0, //4616 to 4624
63,192,63,192,60,0,60,0, //4624 to 4632
63,240,63,240,0,0,0,0, //4632 to 4640
0,0,0,0,0,0,0,0, //4640 to 4648
63,252,63,252,3,204,3,204, //4648 to 4656
63,252,63,252,243,192,243,192, //4656 to 4664
63,252,63,252,0,0,0,0, //4664 to 4672
15,252,15,252,63,192,63,192, //4672 to 4680
243,192,243,192,243,252,243,252, //4680 to 4688
255,192,255,192,243,192,243,192, //4688 to 4696
243,252,243,252,0,0,0,0, //4696 to 4704
15,240,15,240,60,60,60,60, //4704 to 4712
15,240,15,240,60,60,60,60, //4712 to 4720
60,60,60,60,60,60,60,60, //4720 to 4728
15,240,15,240,0,0,0,0, //4728 to 4736
60,60,60,60,0,0,0,0, //4736 to 4744
15,240,15,240,60,60,60,60, //4744 to 4752
60,60,60,60,60,60,60,60, //4752 to 4760
15,240,15,240,0,0,0,0, //4760 to 4768
63,0,63,0,0,0,0,0, //4768 to 4776
15,240,15,240,60,60,60,60, //4776 to 4784
60,60,60,60,60,60,60,60, //4784 to 4792
15,240,15,240,0,0,0,0, //4792 to 4800
15,240,15,240,60,60,60,60, //4800 to 4808
0,0,0,0,60,60,60,60, //4808 to 4816
60,60,60,60,60,60,60,60, //4816 to 4824
15,252,15,252,0,0,0,0, //4824 to 4832
63,0,63,0,0,0,0,0, //4832 to 4840
60,60,60,60,60,60,60,60, //4840 to 4848
60,60,60,60,60,60,60,60, //4848 to 4856
15,252,15,252,0,0,0,0, //4856 to 4864
60,60,60,60,0,0,0,0, //4864 to 4872
60,60,60,60,60,60,60,60, //4872 to 4880
60,60,60,60,15,252,15,252, //4880 to 4888
0,60,0,60,15,240,15,240, //4888 to 4896
60,60,60,60,15,240,15,240, //4896 to 4904
60,60,60,60,60,60,60,60, //4904 to 4912
60,60,60,60,60,60,60,60, //4912 to 4920
15,240,15,240,0,0,0,0, //4920 to 4928
60,60,60,60,0,0,0,0, //4928 to 4936
60,60,60,60,60,60,60,60, //4936 to 4944
60,60,60,60,60,60,60,60, //4944 to 4952
15,240,15,240,0,0,0,0, //4952 to 4960
0,240,0,240,0,240,0,240, //4960 to 4968
15,252,15,252,60,0,60,0, //4968 to 4976
60,0,60,0,15,252,15,252, //4976 to 4984
0,240,0,240,0,240,0,240, //4984 to 4992
15,192,15,192,60,240,60,240, //4992 to 5000
60,0,60,0,255,0,255,0, //5000 to 5008
60,0,60,0,60,60,60,60, //5008 to 5016
255,240,255,240,0,0,0,0, //5016 to 5024
60,60,60,60,60,60,60,60, //5024 to 5032
15,240,15,240,3,192,3,192, //5032 to 5040
63,252,63,252,3,192,3,192, //5040 to 5048
63,252,63,252,3,192,3,192, //5048 to 5056
63,240,63,240,60,60,60,60, //5056 to 5064
60,60,60,60,63,240,63,240, //5064 to 5072
60,60,60,60,60,255,60,255, //5072 to 5080
60,60,60,60,60,15,60,15, //5080 to 5088
0,252,0,252,3,207,3,207, //5088 to 5096
3,192,3,192,15,240,15,240, //5096 to 5104
3,192,3,192,3,192,3,192, //5104 to 5112
63,192,63,192,15,0,15,0, //5112 to 5120
0,252,0,252,0,0,0,0, //5120 to 5128
15,240,15,240,0,60,0,60, //5128 to 5136
15,252,15,252,60,60,60,60, //5136 to 5144
15,252,15,252,0,0,0,0, //5144 to 5152
0,252,0,252,0,0,0,0, //5152 to 5160
3,192,3,192,3,192,3,192, //5160 to 5168
3,192,3,192,3,192,3,192, //5168 to 5176
3,192,3,192,0,0,0,0, //5176 to 5184
0,252,0,252,0,0,0,0, //5184 to 5192
15,240,15,240,60,60,60,60, //5192 to 5200
60,60,60,60,60,60,60,60, //5200 to 5208
15,240,15,240,0,0,0,0, //5208 to 5216
0,252,0,252,0,0,0,0, //5216 to 5224
60,60,60,60,60,60,60,60, //5224 to 5232
60,60,60,60,60,60,60,60, //5232 to 5240
15,252,15,252,0,0,0,0, //5240 to 5248
63,60,63,60,243,240,243,240, //5248 to 5256
0,0,0,0,63,240,63,240, //5256 to 5264
60,60,60,60,60,60,60,60, //5264 to 5272
60,60,60,60,0,0,0,0, //5272 to 5280
63,252,63,252,0,0,0,0, //5280 to 5288
60,60,60,60,63,60,63,60, //5288 to 5296
63,252,63,252,60,252,60,252, //5296 to 5304
60,60,60,60,0,0,0,0, //5304 to 5312
15,252,15,252,60,60,60,60, //5312 to 5320
60,60,60,60,15,252,15,252, //5320 to 5328
0,0,0,0,63,252,63,252, //5328 to 5336
0,0,0,0,0,0,0,0, //5336 to 5344
15,240,15,240,60,60,60,60, //5344 to 5352
60,60,60,60,15,240,15,240, //5352 to 5360
0,0,0,0,63,252,63,252, //5360 to 5368
0,0,0,0,0,0,0,0, //5368 to 5376
3,192,3,192,0,0,0,0, //5376 to 5384
3,192,3,192,15,0,15,0, //5384 to 5392
60,0,60,0,60,60,60,60, //5392 to 5400
15,240,15,240,0,0,0,0, //5400 to 5408
0,0,0,0,0,0,0,0, //5408 to 5416
0,0,0,0,63,252,63,252, //5416 to 5424
60,0,60,0,60,0,60,0, //5424 to 5432
0,0,0,0,0,0,0,0, //5432 to 5440
0,0,0,0,0,0,0,0, //5440 to 5448
0,0,0,0,63,252,63,252, //5448 to 5456
0,60,0,60,0,60,0,60, //5456 to 5464
0,0,0,0,0,0,0,0, //5464 to 5472
240,60,240,60,240,240,240,240, //5472 to 5480
243,192,243,192,15,252,15,252, //5480 to 5488
60,15,60,15,240,60,240,60, //5488 to 5496
0,240,0,240,3,255,3,255, //5496 to 5504
240,60,240,60,240,240,240,240, //5504 to 5512
243,192,243,192,15,60,15,60, //5512 to 5520
60,252,60,252,243,60,243,60, //5520 to 5528
3,255,3,255,0,60,0,60, //5528 to 5536
3,192,3,192,0,0,0,0, //5536 to 5544
3,192,3,192,3,192,3,192, //5544 to 5552
3,192,3,192,3,192,3,192, //5552 to 5560
3,192,3,192,0,0,0,0, //5560 to 5568
0,0,0,0,15,60,15,60, //5568 to 5576
60,240,60,240,243,192,243,192, //5576 to 5584
60,240,60,240,15,60,15,60, //5584 to 5592
0,0,0,0,0,0,0,0, //5592 to 5600
0,0,0,0,243,192,243,192, //5600 to 5608
60,240,60,240,15,60,15,60, //5608 to 5616
60,240,60,240,243,192,243,192, //5616 to 5624
0,0,0,0,0,0,0,0, //5624 to 5632
12,12,12,12,192,192,192,192, //5632 to 5640
12,12,12,12,192,192,192,192, //5640 to 5648
12,12,12,12,192,192,192,192, //5648 to 5656
12,12,12,12,192,192,192,192, //5656 to 5664
51,51,51,51,204,204,204,204, //5664 to 5672
51,51,51,51,204,204,204,204, //5672 to 5680
51,51,51,51,204,204,204,204, //5680 to 5688
51,51,51,51,204,204,204,204, //5688 to 5696
243,243,243,243,63,63,63,63, //5696 to 5704
243,243,243,243,63,63,63,63, //5704 to 5712
243,243,243,243,63,63,63,63, //5712 to 5720
243,243,243,243,63,63,63,63, //5720 to 5728
0,192,0,192,0,192,0,192, //5728 to 5736
0,192,0,192,0,192,0,192, //5736 to 5744
0,192,0,192,0,192,0,192, //5744 to 5752
0,192,0,192,0,192,0,192, //5752 to 5760
0,192,0,192,0,192,0,192, //5760 to 5768
0,192,0,192,0,192,0,192, //5768 to 5776
255,192,255,192,0,192,0,192, //5776 to 5784
0,192,0,192,0,192,0,192, //5784 to 5792
0,192,0,192,0,192,0,192, //5792 to 5800
0,192,0,192,255,192,255,192, //5800 to 5808
255,192,255,192,0,192,0,192, //5808 to 5816
0,192,0,192,0,192,0,192, //5816 to 5824
3,240,3,240,3,240,3,240, //5824 to 5832
3,240,3,240,3,240,3,240, //5832 to 5840
255,240,255,240,3,240,3,240, //5840 to 5848
3,240,3,240,3,240,3,240, //5848 to 5856
0,0,0,0,0,0,0,0, //5856 to 5864
0,0,0,0,0,0,0,0, //5864 to 5872
255,240,255,240,3,240,3,240, //5872 to 5880
3,240,3,240,3,240,3,240, //5880 to 5888
0,0,0,0,0,0,0,0, //5888 to 5896
0,0,0,0,255,192,255,192, //5896 to 5904
255,192,255,192,0,192,0,192, //5904 to 5912
0,192,0,192,0,192,0,192, //5912 to 5920
3,240,3,240,3,240,3,240, //5920 to 5928
3,240,3,240,255,240,255,240, //5928 to 5936
255,240,255,240,3,240,3,240, //5936 to 5944
3,240,3,240,3,240,3,240, //5944 to 5952
3,240,3,240,3,240,3,240, //5952 to 5960
3,240,3,240,3,240,3,240, //5960 to 5968
3,240,3,240,3,240,3,240, //5968 to 5976
3,240,3,240,3,240,3,240, //5976 to 5984
0,0,0,0,0,0,0,0, //5984 to 5992
0,0,0,0,255,240,255,240, //5992 to 6000
255,240,255,240,3,240,3,240, //6000 to 6008
3,240,3,240,3,240,3,240, //6008 to 6016
3,240,3,240,3,240,3,240, //6016 to 6024
3,240,3,240,255,240,255,240, //6024 to 6032
255,240,255,240,0,0,0,0, //6032 to 6040
0,0,0,0,0,0,0,0, //6040 to 6048
3,240,3,240,3,240,3,240, //6048 to 6056
3,240,3,240,3,240,3,240, //6056 to 6064
255,240,255,240,0,0,0,0, //6064 to 6072
0,0,0,0,0,0,0,0, //6072 to 6080
0,192,0,192,0,192,0,192, //6080 to 6088
0,192,0,192,255,192,255,192, //6088 to 6096
255,192,255,192,0,0,0,0, //6096 to 6104
0,0,0,0,0,0,0,0, //6104 to 6112
0,0,0,0,0,0,0,0, //6112 to 6120
0,0,0,0,0,0,0,0, //6120 to 6128
255,192,255,192,0,192,0,192, //6128 to 6136
0,192,0,192,0,192,0,192, //6136 to 6144
0,192,0,192,0,192,0,192, //6144 to 6152
0,192,0,192,0,192,0,192, //6152 to 6160
0,255,0,255,0,0,0,0, //6160 to 6168
0,0,0,0,0,0,0,0, //6168 to 6176
0,192,0,192,0,192,0,192, //6176 to 6184
0,192,0,192,0,192,0,192, //6184 to 6192
255,255,255,255,0,0,0,0, //6192 to 6200
0,0,0,0,0,0,0,0, //6200 to 6208
0,0,0,0,0,0,0,0, //6208 to 6216
0,0,0,0,0,0,0,0, //6216 to 6224
255,255,255,255,0,192,0,192, //6224 to 6232
0,192,0,192,0,192,0,192, //6232 to 6240
0,192,0,192,0,192,0,192, //6240 to 6248
0,192,0,192,0,192,0,192, //6248 to 6256
0,255,0,255,0,192,0,192, //6256 to 6264
0,192,0,192,0,192,0,192, //6264 to 6272
0,0,0,0,0,0,0,0, //6272 to 6280
0,0,0,0,0,0,0,0, //6280 to 6288
255,255,255,255,0,0,0,0, //6288 to 6296
0,0,0,0,0,0,0,0, //6296 to 6304
0,192,0,192,0,192,0,192, //6304 to 6312
0,192,0,192,0,192,0,192, //6312 to 6320
255,255,255,255,0,192,0,192, //6320 to 6328
0,192,0,192,0,192,0,192, //6328 to 6336
0,192,0,192,0,192,0,192, //6336 to 6344
0,192,0,192,0,255,0,255, //6344 to 6352
0,255,0,255,0,192,0,192, //6352 to 6360
0,192,0,192,0,192,0,192, //6360 to 6368
3,240,3,240,3,240,3,240, //6368 to 6376
3,240,3,240,3,240,3,240, //6376 to 6384
3,255,3,255,3,240,3,240, //6384 to 6392
3,240,3,240,3,240,3,240, //6392 to 6400
3,240,3,240,3,240,3,240, //6400 to 6408
3,240,3,240,3,255,3,255, //6408 to 6416
3,255,3,255,0,0,0,0, //6416 to 6424
0,0,0,0,0,0,0,0, //6424 to 6432
0,0,0,0,0,0,0,0, //6432 to 6440
0,0,0,0,3,255,3,255, //6440 to 6448
3,255,3,255,3,240,3,240, //6448 to 6456
3,240,3,240,3,240,3,240, //6456 to 6464
3,240,3,240,3,240,3,240, //6464 to 6472
3,240,3,240,255,255,255,255, //6472 to 6480
255,255,255,255,0,0,0,0, //6480 to 6488
0,0,0,0,0,0,0,0, //6488 to 6496
0,0,0,0,0,0,0,0, //6496 to 6504
0,0,0,0,255,255,255,255, //6504 to 6512
255,255,255,255,3,240,3,240, //6512 to 6520
3,240,3,240,3,240,3,240, //6520 to 6528
3,240,3,240,3,240,3,240, //6528 to 6536
3,240,3,240,3,255,3,255, //6536 to 6544
3,255,3,255,3,240,3,240, //6544 to 6552
3,240,3,240,3,240,3,240, //6552 to 6560
0,0,0,0,0,0,0,0, //6560 to 6568
0,0,0,0,255,255,255,255, //6568 to 6576
255,255,255,255,0,0,0,0, //6576 to 6584
0,0,0,0,0,0,0,0, //6584 to 6592
3,240,3,240,3,240,3,240, //6592 to 6600
3,240,3,240,255,255,255,255, //6600 to 6608
255,255,255,255,3,240,3,240, //6608 to 6616
3,240,3,240,3,240,3,240, //6616 to 6624
0,192,0,192,0,192,0,192, //6624 to 6632
0,192,0,192,255,255,255,255, //6632 to 6640
255,255,255,255,0,0,0,0, //6640 to 6648
0,0,0,0,0,0,0,0, //6648 to 6656
3,240,3,240,3,240,3,240, //6656 to 6664
3,240,3,240,3,240,3,240, //6664 to 6672
255,255,255,255,0,0,0,0, //6672 to 6680
0,0,0,0,0,0,0,0, //6680 to 6688
0,0,0,0,0,0,0,0, //6688 to 6696
0,0,0,0,255,255,255,255, //6696 to 6704
255,255,255,255,0,192,0,192, //6704 to 6712
0,192,0,192,0,192,0,192, //6712 to 6720
0,0,0,0,0,0,0,0, //6720 to 6728
0,0,0,0,0,0,0,0, //6728 to 6736
255,255,255,255,3,240,3,240, //6736 to 6744
3,240,3,240,3,240,3,240, //6744 to 6752
3,240,3,240,3,240,3,240, //6752 to 6760
3,240,3,240,3,240,3,240, //6760 to 6768
3,255,3,255,0,0,0,0, //6768 to 6776
0,0,0,0,0,0,0,0, //6776 to 6784
0,192,0,192,0,192,0,192, //6784 to 6792
0,192,0,192,0,255,0,255, //6792 to 6800
0,255,0,255,0,0,0,0, //6800 to 6808
0,0,0,0,0,0,0,0, //6808 to 6816
0,0,0,0,0,0,0,0, //6816 to 6824
0,0,0,0,0,255,0,255, //6824 to 6832
0,255,0,255,0,192,0,192, //6832 to 6840
0,192,0,192,0,192,0,192, //6840 to 6848
0,0,0,0,0,0,0,0, //6848 to 6856
0,0,0,0,0,0,0,0, //6856 to 6864
3,255,3,255,3,240,3,240, //6864 to 6872
3,240,3,240,3,240,3,240, //6872 to 6880
3,240,3,240,3,240,3,240, //6880 to 6888
3,240,3,240,3,240,3,240, //6888 to 6896
255,255,255,255,3,240,3,240, //6896 to 6904
3,240,3,240,3,240,3,240, //6904 to 6912
0,192,0,192,0,192,0,192, //6912 to 6920
0,192,0,192,255,255,255,255, //6920 to 6928
255,255,255,255,0,192,0,192, //6928 to 6936
0,192,0,192,0,192,0,192, //6936 to 6944
0,192,0,192,0,192,0,192, //6944 to 6952
0,192,0,192,0,192,0,192, //6952 to 6960
255,192,255,192,0,0,0,0, //6960 to 6968
0,0,0,0,0,0,0,0, //6968 to 6976
0,0,0,0,0,0,0,0, //6976 to 6984
0,0,0,0,0,0,0,0, //6984 to 6992
0,255,0,255,0,192,0,192, //6992 to 7000
0,192,0,192,0,192,0,192, //7000 to 7008
255,255,255,255,255,255,255,255, //7008 to 7016
255,255,255,255,255,255,255,255, //7016 to 7024
255,255,255,255,255,255,255,255, //7024 to 7032
255,255,255,255,255,255,255,255, //7032 to 7040
0,0,0,0,0,0,0,0, //7040 to 7048
0,0,0,0,0,0,0,0, //7048 to 7056
255,255,255,255,255,255,255,255, //7056 to 7064
255,255,255,255,255,255,255,255, //7064 to 7072
255,0,255,0,255,0,255,0, //7072 to 7080
255,0,255,0,255,0,255,0, //7080 to 7088
255,0,255,0,255,0,255,0, //7088 to 7096
255,0,255,0,255,0,255,0, //7096 to 7104
0,255,0,255,0,255,0,255, //7104 to 7112
0,255,0,255,0,255,0,255, //7112 to 7120
0,255,0,255,0,255,0,255, //7120 to 7128
0,255,0,255,0,255,0,255, //7128 to 7136
255,255,255,255,255,255,255,255, //7136 to 7144
255,255,255,255,255,255,255,255, //7144 to 7152
0,0,0,0,0,0,0,0, //7152 to 7160
0,0,0,0,0,0,0,0, //7160 to 7168
0,0,0,0,0,0,0,0, //7168 to 7176
63,60,63,60,240,240,240,240, //7176 to 7184
240,240,240,240,240,240,240,240, //7184 to 7192
63,60,63,60,0,0,0,0, //7192 to 7200
15,240,15,240,60,60,60,60, //7200 to 7208
60,60,60,60,63,240,63,240, //7208 to 7216
60,60,60,60,60,60,60,60, //7216 to 7224
63,240,63,240,60,0,60,0, //7224 to 7232
63,252,63,252,60,60,60,60, //7232 to 7240
60,0,60,0,60,0,60,0, //7240 to 7248
60,0,60,0,60,0,60,0, //7248 to 7256
60,0,60,0,0,0,0,0, //7256 to 7264
0,0,0,0,0,0,0,0, //7264 to 7272
255,252,255,252,60,240,60,240, //7272 to 7280
60,240,60,240,60,240,60,240, //7280 to 7288
60,60,60,60,0,0,0,0, //7288 to 7296
63,252,63,252,60,60,60,60, //7296 to 7304
15,0,15,0,3,192,3,192, //7304 to 7312
15,0,15,0,60,60,60,60, //7312 to 7320
63,252,63,252,0,0,0,0, //7320 to 7328
0,0,0,0,0,0,0,0, //7328 to 7336
15,252,15,252,60,240,60,240, //7336 to 7344
60,240,60,240,60,240,60,240, //7344 to 7352
15,192,15,192,0,0,0,0, //7352 to 7360
0,0,0,0,0,0,0,0, //7360 to 7368
60,60,60,60,60,60,60,60, //7368 to 7376
60,60,60,60,60,60,60,60, //7376 to 7384
63,255,63,255,240,0,240,0, //7384 to 7392
0,0,0,0,0,0,0,0, //7392 to 7400
63,252,63,252,243,192,243,192, //7400 to 7408
3,192,3,192,3,192,3,192, //7408 to 7416
0,240,0,240,0,0,0,0, //7416 to 7424
63,240,63,240,15,192,15,192, //7424 to 7432
63,240,63,240,243,60,243,60, //7432 to 7440
243,60,243,60,63,240,63,240, //7440 to 7448
15,192,15,192,63,240,63,240, //7448 to 7456
63,240,63,240,240,60,240,60, //7456 to 7464
240,60,240,60,255,252,255,252, //7464 to 7472
240,60,240,60,240,60,240,60, //7472 to 7480
63,240,63,240,0,0,0,0, //7480 to 7488
63,240,63,240,240,60,240,60, //7488 to 7496
240,60,240,60,240,60,240,60, //7496 to 7504
60,240,60,240,60,240,60,240, //7504 to 7512
252,252,252,252,0,0,0,0, //7512 to 7520
3,252,3,252,15,0,15,0, //7520 to 7528
3,192,3,192,15,240,15,240, //7528 to 7536
60,60,60,60,60,60,60,60, //7536 to 7544
15,240,15,240,0,0,0,0, //7544 to 7552
0,0,0,0,0,0,0,0, //7552 to 7560
63,252,63,252,243,207,243,207, //7560 to 7568
243,207,243,207,63,252,63,252, //7568 to 7576
0,0,0,0,0,0,0,0, //7576 to 7584
0,15,0,15,0,60,0,60, //7584 to 7592
15,252,15,252,60,207,60,207, //7592 to 7600
63,15,63,15,15,252,15,252, //7600 to 7608
60,0,60,0,240,0,240,0, //7608 to 7616
3,252,3,252,15,0,15,0, //7616 to 7624
60,0,60,0,63,252,63,252, //7624 to 7632
60,0,60,0,15,0,15,0, //7632 to 7640
3,252,3,252,0,0,0,0, //7640 to 7648
63,240,63,240,240,60,240,60, //7648 to 7656
240,60,240,60,240,60,240,60, //7656 to 7664
240,60,240,60,240,60,240,60, //7664 to 7672
240,60,240,60,0,0,0,0, //7672 to 7680
0,0,0,0,63,252,63,252, //7680 to 7688
0,0,0,0,63,252,63,252, //7688 to 7696
0,0,0,0,63,252,63,252, //7696 to 7704
0,0,0,0,0,0,0,0, //7704 to 7712
3,192,3,192,3,192,3,192, //7712 to 7720
63,252,63,252,3,192,3,192, //7720 to 7728
3,192,3,192,0,0,0,0, //7728 to 7736
63,252,63,252,0,0,0,0, //7736 to 7744
15,0,15,0,3,192,3,192, //7744 to 7752
0,240,0,240,3,192,3,192, //7752 to 7760
15,0,15,0,0,0,0,0, //7760 to 7768
63,252,63,252,0,0,0,0, //7768 to 7776
0,240,0,240,3,192,3,192, //7776 to 7784
15,0,15,0,3,192,3,192, //7784 to 7792
0,240,0,240,0,0,0,0, //7792 to 7800
63,252,63,252,0,0,0,0, //7800 to 7808
0,252,0,252,3,207,3,207, //7808 to 7816
3,207,3,207,3,192,3,192, //7816 to 7824
3,192,3,192,3,192,3,192, //7824 to 7832
3,192,3,192,3,192,3,192, //7832 to 7840
3,192,3,192,3,192,3,192, //7840 to 7848
3,192,3,192,3,192,3,192, //7848 to 7856
3,192,3,192,243,192,243,192, //7856 to 7864
243,192,243,192,63,0,63,0, //7864 to 7872
3,192,3,192,3,192,3,192, //7872 to 7880
0,0,0,0,63,252,63,252, //7880 to 7888
0,0,0,0,3,192,3,192, //7888 to 7896
3,192,3,192,0,0,0,0, //7896 to 7904
0,0,0,0,63,60,63,60, //7904 to 7912
243,240,243,240,0,0,0,0, //7912 to 7920
63,60,63,60,243,240,243,240, //7920 to 7928
0,0,0,0,0,0,0,0, //7928 to 7936
15,240,15,240,60,60,60,60, //7936 to 7944
60,60,60,60,15,240,15,240, //7944 to 7952
0,0,0,0,0,0,0,0, //7952 to 7960
0,0,0,0,0,0,0,0, //7960 to 7968
0,0,0,0,0,0,0,0, //7968 to 7976
0,0,0,0,3,192,3,192, //7976 to 7984
3,192,3,192,0,0,0,0, //7984 to 7992
0,0,0,0,0,0,0,0, //7992 to 8000
0,0,0,0,0,0,0,0, //8000 to 8008
0,0,0,0,0,0,0,0, //8008 to 8016
3,192,3,192,0,0,0,0, //8016 to 8024
0,0,0,0,0,0,0,0, //8024 to 8032
3,252,3,252,3,192,3,192, //8032 to 8040
3,192,3,192,3,192,3,192, //8040 to 8048
3,192,3,192,243,192,243,192, //8048 to 8056
63,192,63,192,15,192,15,192, //8056 to 8064
63,192,63,192,60,240,60,240, //8064 to 8072
60,240,60,240,60,240,60,240, //8072 to 8080
60,240,60,240,0,0,0,0, //8080 to 8088
0,0,0,0,0,0,0,0, //8088 to 8096
15,192,15,192,0,240,0,240, //8096 to 8104
3,192,3,192,15,0,15,0, //8104 to 8112
15,240,15,240,0,0,0,0, //8112 to 8120
0,0,0,0,0,0,0,0, //8120 to 8128
0,0,0,0,0,0,0,0, //8128 to 8136
15,240,15,240,15,240,15,240, //8136 to 8144
15,240,15,240,15,240,15,240, //8144 to 8152
0,0,0,0,0,0,0,0, //8152 to 8160
0,0,0,0,0,0,0,0, //8160 to 8168
0,0,0,0,0,0,0,0, //8168 to 8176
0,0,0,0,0,0,0,0, //8176 to 8184
0,0,0,0,0,0,0,0 //8184 to 8192
};


unsigned char cupertino[3072] = {
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   48, 48, 48, 48, 48, 48, 0, 48, 48, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 48, 48, 16, 32, 0,
   0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   120, 204, 204, 204, 204, 204, 204, 204, 120, 0, 0, 0,
   48, 112, 48, 48, 48, 48, 48, 48, 48, 0, 0, 0,
   124, 134, 6, 12, 24, 48, 96, 192, 252, 0, 0, 0,
   252, 8, 16, 56, 12, 12, 12, 140, 120, 0, 0, 0,
   4, 12, 28, 44, 76, 254, 12, 12, 12, 0, 0, 0,
   252, 192, 192, 248, 12, 12, 12, 140, 120, 0, 0, 0,
   56, 96, 192, 248, 204, 204, 204, 204, 120, 0, 0, 0,
   252, 12, 12, 12, 24, 48, 48, 48, 48, 0, 0, 0,
   120, 204, 204, 204, 120, 204, 204, 204, 120, 0, 0, 0,
   120, 204, 204, 204, 204, 124, 12, 24, 112, 0, 0, 0,
   0, 0, 0, 48, 48, 0, 0, 48, 48, 0, 0, 0,
   0, 0, 0, 48, 48, 0, 0, 48, 48, 16, 32, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   120, 140, 12, 24, 48, 48, 0, 48, 48, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   120, 204, 204, 204, 252, 204, 204, 204, 204, 0, 0, 0,
   248, 204, 204, 204, 248, 204, 204, 204, 248, 0, 0, 0,
   120, 196, 192, 192, 192, 192, 192, 196, 120, 0, 0, 0,
   248, 204, 204, 204, 204, 204, 204, 204, 248, 0, 0, 0,
   252, 192, 192, 192, 248, 192, 192, 192, 252, 0, 0, 0,
   252, 192, 192, 192, 248, 192, 192, 192, 192, 0, 0, 0,
   120, 196, 192, 192, 220, 204, 204, 204, 120, 0, 0, 0,
   204, 204, 204, 204, 252, 204, 204, 204, 204, 0, 0, 0,
   48, 48, 48, 48, 48, 48, 48, 48, 48, 0, 0, 0,
   12, 12, 12, 12, 12, 12, 204, 204, 120, 0, 0, 0,
   198, 204, 216, 240, 224, 240, 216, 204, 198, 0, 0, 0,
   192, 192, 192, 192, 192, 192, 192, 192, 252, 0, 0, 0,
   130, 198, 238, 254, 186, 146, 130, 130, 130, 0, 0, 0,
   130, 194, 226, 242, 186, 158, 142, 134, 130, 0, 0, 0,
   120, 204, 204, 204, 204, 204, 204, 204, 120, 0, 0, 0,
   248, 204, 204, 248, 192, 192, 192, 192, 192, 0, 0, 0,
   120, 204, 204, 204, 204, 204, 204, 204, 120, 12, 0, 0,
   248, 204, 204, 248, 204, 204, 204, 204, 204, 0, 0, 0,
   112, 200, 192, 224, 112, 56, 24, 152, 112, 0, 0, 0,
   252, 48, 48, 48, 48, 48, 48, 48, 48, 0, 0, 0,
   204, 204, 204, 204, 204, 204, 204, 204, 120, 0, 0, 0,
   204, 204, 204, 204, 204, 204, 204, 200, 240, 0, 0, 0,
   214, 214, 214, 214, 214, 214, 214, 212, 248, 0, 0, 0,
   204, 204, 204, 120, 48, 120, 204, 204, 204, 0, 0, 0,
   204, 204, 204, 120, 48, 48, 48, 48, 48, 0, 0, 0,
   252, 12, 12, 24, 48, 96, 192, 192, 252, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 120, 140, 124, 204, 204, 204, 124, 0, 0, 0,
   192, 192, 248, 204, 204, 204, 204, 204, 248, 0, 0, 0,
   0, 0, 120, 196, 192, 192, 192, 196, 120, 0, 0, 0,
   12, 12, 124, 204, 204, 204, 204, 204, 124, 0, 0, 0,
   0, 0, 120, 204, 204, 252, 192, 196, 120, 0, 0, 0,
   56, 96, 240, 96, 96, 96, 96, 96, 96, 0, 0, 0,
   0, 0, 124, 204, 204, 204, 204, 204, 124, 12, 140, 120,
   192, 192, 248, 204, 204, 204, 204, 204, 204, 0, 0, 0,
   48, 0, 48, 48, 48, 48, 48, 48, 48, 0, 0, 0,
   24, 0, 24, 24, 24, 24, 24, 24, 24, 24, 152, 112,
   192, 192, 204, 216, 240, 224, 240, 216, 204, 0, 0, 0,
   48, 48, 48, 48, 48, 48, 48, 48, 48, 0, 0, 0,
   0, 0, 252, 214, 214, 214, 214, 214, 214, 0, 0, 0,
   0, 0, 248, 204, 204, 204, 204, 204, 204, 0, 0, 0,
   0, 0, 120, 204, 204, 204, 204, 204, 120, 0, 0, 0,
   0, 0, 248, 204, 204, 204, 204, 204, 248, 192, 192, 0,
   0, 0, 124, 204, 204, 204, 204, 204, 124, 12, 12, 0,
   0, 0, 216, 224, 192, 192, 192, 192, 192, 0, 0, 0,
   0, 0, 112, 200, 224, 112, 56, 152, 112, 0, 0, 0,
   96, 96, 240, 96, 96, 96, 96, 96, 48, 0, 0, 0,
   0, 0, 204, 204, 204, 204, 204, 204, 124, 0, 0, 0,
   0, 0, 204, 204, 204, 204, 204, 200, 240, 0, 0, 0,
   0, 0, 214, 214, 214, 214, 214, 212, 248, 0, 0, 0,
   0, 0, 204, 204, 204, 120, 204, 204, 204, 0, 0, 0,
   0, 0, 204, 204, 204, 204, 204, 204, 124, 12, 140, 120,
   0, 0, 252, 12, 24, 48, 96, 192, 252, 0, 0, 0,
};









namespace Color{
  
  const unsigned int     Red = 256*255*255;
  const unsigned int     DarkBlue = 255;
  const unsigned int     Blue = 65000;
  const unsigned int     Green = 255*255;
  const unsigned int     Yellow =  16776961;
  const unsigned int     Magenta = 16581610;
  const unsigned int     Orange = 16597999;
  const unsigned int     White = 16777200;
  const unsigned int     Cyan = 255*255+255;
}; 


GraphicsContext *VirtualScreen;
GraphicsContext *PhysicalScreen;

unsigned int VPalette[256];
unsigned int  VideoBuffer[307200];
unsigned char *pVBuffer;

void StartDisplay(){
  
  // initialize the vga drivers
  vga_init();
  vga_setmode(34);
  gl_setcontextvga(34);
  
  
  PhysicalScreen = gl_allocatecontext();
  gl_getcontext(PhysicalScreen);
  
  
  gl_setcontextvgavirtual(34);
  VirtualScreen = gl_allocatecontext();
  gl_getcontext(VirtualScreen);
  gl_setcontext(VirtualScreen);
  
  gl_setfont(16,16,font3);
  gl_setwritemode(FONT_COMPRESSED + WRITEMODE_MASKED);
  gl_setfontcolors(0, Color::Orange);
  
  
  gl_copyscreen(PhysicalScreen);
  
  
  int i;
  for(i=0;i<256;i++) VPalette[i]=i + 256*i + 256*256*i;
  VPalette[255] = Color::Red;
  VPalette[254] = Color::Red;
  VPalette[253] = Color::Red;
  VPalette[252] = Color::Red;
  VPalette[251] = Color::Red;

  errorcount = 0;

  pVBuffer = (unsigned char *)VideoBuffer;
  return;
};

void RestoreDisplay(){
  vga_init();
  vga_setmode(34);
};


void FontOverwrite(){
    gl_setwritemode(FONT_COMPRESSED + WRITEMODE_OVERWRITE);
};

void FontMask(){
  gl_setwritemode(FONT_COMPRESSED + WRITEMODE_MASKED);
};



void PlaceSmallBox(QCamera *cam,unsigned char *buffer, void *spots, int error, int qID){
  static unsigned short dx, dy;
  static unsigned short x, y;
  static int i,j; // counter variables.
  static GuiderMode modeID;
  static long fmnumber;
  int val;
  Point *max;
  max = (Point*) spots;
  fmnumber = cam->onlyGetFrame();  
  if(!error){
    // establish what we are looking at. The region of interest will be
    // drawn in the top left corner of the screen, with all the other
    // additional data to the right of and below it. 
    x = cam->getRoiX();
    y = cam->getRoiY();
    dx = cam->getRoiDX();
    dy = cam->getRoiDY();
  
    modeID = cam->getModeID();
    if(dx<201 && dy<201){
      
      for(i=0;i<dx*dy; i++)
	VideoBuffer[i] = VPalette[buffer[i]];
      
      gl_putbox(5,5,dx,dy, (void *) VideoBuffer);
      
      gl_drawRectangle(3,3,dx+5,dy+5,Color::Blue);
      
      gl_drawRectangle(5,240,170,130,Color::White);
      gl_drawRectangle(5+x/8, 240+y/8, dx/8, dy/8, Color::Green);
      //      DrawCircle(5+806/8, 240+641/8, 180/8, Color::Blue);
      
      gl_printf(5,215,"%s",longModeName[(int) cam->getModeID()]);
      gl_printf(5,380,"%d x %d",dx, dy);
      gl_printf(5,405,"  @ (%d, %d)",x,y);
      gl_printf(5,425,"LVDT -> %6.3f ",leakylvdt/409.6);


      gl_printf(215,5,"Frame: %7d",fmnumber);
      // print additional stuff here
      
      //gl_drawDiamond(620,20,10,Color::Green);
      if(!displayMD.modeMismatch){
	gl_drawSquare(620,70,10, Color::Green);
      } else {
	gl_drawDiamond(620,70,10, Color::Red);
      };
      if(!displayMD.sensorMismatch){
	gl_drawSquare(620,120,10, Color::Green);
      } else {
	gl_drawDiamond(620,120,10, Color::Red);
      };
      switch(modeID){
      case POINTINGMODE:{

	gl_printf(215,20,"Tracking Point:");
	gl_printf(215,33,"X = %5.2lf",1.1);
	gl_printf(215,46,"Y = %5.2lf",1.3);
	gl_printf(215,61,"Centroid:");
	gl_printf(215,74,"X = %5.2lf",2.34);
	gl_printf(215,87,"Y = %5.2lf",3.44);
	gl_printf(215,100,"RMS D = %.3lf",3.44);
	gl_printf(215,115,"DTU Pointing Errors");
	gl_printf(215,128,"EL = %.4lf",pointingMD.DTUpeEL);
	gl_printf(215,141,"CE = %.4lf",pointingMD.DTUpeCE);
	break;
      };
      case ALIGNMENTMODE:{
	gl_printf(215,22,"dXY :(%7.2lf, %7.2lf)",alignmentMD.centX, alignmentMD.centY);
	gl_printf(215,42,"dRMS:(%7.2lf, %7.2lf)",alignmentMD.rmsx, alignmentMD.rmsy);
	

	//	gl_printf(215,46,"Y = %7.2lf    ",alignmentMD.centY);

	gl_printf(215,62,"LVL   : (%7.2lf, %5.2lf)",alignmentMD.flux, alignmentMD.bgnd);
	if(!(fmnumber %15)){
	  
	  gl_printf(215,82,"RSQ : (%7.2lf, %7.2lf)",alignmentMD.rsqx, alignmentMD.rsqy);
	  gl_printf(215, 102, "T   : (%7dus,%4dms)",cam->getExpT(), cam->getTrigT());
	  gl_printf(530,300,"A:%02d",ctralgorithm);
	  gl_printf(530,320,"R:%4.1f",ctrspotrms);
	  gl_printf(530,340,"C:%4.1f",ctrovermaxcnt);
	  gl_printf(530,360,"T:%4.1f",ctrovermaxthr);
	  gl_printf(530,380,"B:%02d",DIVISOR);
	  
	  
	  //	  gl_printf(450,60,"LVDT -> %6.3f ",leakylvdt/409.6);
	};
	  gl_printf(215,122,"ZM  : (%7.2lf, %7.2lf)",max->x, max->y);


	

	gl_drawSquare(401,321,126,Color::Red);
	unsigned short maxx, maxy;
	short posx, posy;
	maxx = (unsigned short) floor(max->x+0.5);
	maxy = (unsigned short) floor(max->y+0.5);
	posx = -(short) (7*(max->x-maxx))+401;
	posy = -(short) (7*(max->y-maxy))+321;
	for(i=-20;i<21;i++){
	  for(j=-20;j<21;j++){
	    //	    if(max->x+j<dx && max->y+i<dy && max->y+i>=0 && max->x+j>=0){
	    //	      val = VPalette[buffer[  (max->x+j +(max->y+i)*dx)]];
	    if(maxx+j<dx && maxy+i<dy && maxy+i>=0 && maxx+j>=0){
	      val = VPalette[buffer[  (maxx+j +(maxy+i)*dx)]];
	    } else {
	      val = 32;
	    };
	    gl_drawSquare(posx+j*6,posy+i*6,3,val);
	    gl_drawSquare(posx+j*6,posy+i*6,2,val);
	    gl_drawSquare(posx+j*6,posy+i*6,1,val);
	    gl_drawSquare(posx+j*6,posy+i*6,0,val);

	  };
	};

	gl_drawDiamond(401, 321, 5,Color::Red);
	
	break;
      };
      default:
	break;
      }
      
      gl_printf(215,150,"GPS UT: %f",gps_utc_time);
      gl_printf(215,170,"%9.4f%c, %9.4f%c",gps_latitude,gps_lat_reference,gps_longitude,gps_long_reference);
      //      gl_printf(215,150,"GPS LAT: %9.4f %c",gps_latitude, gps_lat_reference);
      //      gl_printf(215,170,"GPS LON: %9.4f %c",gps_longitude, gps_long_reference);
      
      gl_copyscreen(PhysicalScreen);
      //	  FrameToLog(fmnumber, dx,dy, buffer);
    }
  } else {
    gl_drawDiamond(620,20,10,Color::Red);
    gl_printf(612,37,"02d",error);
    gl_copyscreen(PhysicalScreen);
    WriteToLog("display","Error %d occured. This is error #%d", error, errorcount++);
    FlushLog();       
  };
  
  


};



void PrepDisplay(QCamera *cam, unsigned char *buffer){
  // prepares the display for smaller versions. 

};



void PlaceFullChip(QCamera *cam, unsigned char *buffer, frameblob &blob, double rms, int error){
  static int i,j;
  static unsigned char pixvalue;
  static int idx;
  static GuiderMode modeID;
  static bloblist *blobs;
  static double xbl, ybl;
  static unsigned short selectedblob, currentblob;
  static short maxx, maxy;
  static unsigned short dx, dy;
  static unsigned short x, y;
  static unsigned int val; 
  modeID = cam->getModeID();
  x = cam->getRoiX();
  y = cam->getRoiY();
  dx = cam->getRoiDX();
  dy = cam->getRoiDY();


  //  printf("I AM HERE\n");

  // the camera was rotated 180 degrees for the Fort Sumner
  // campaign. Going to reverse the display direction on the chip.

  if(!error){
    for(j=0;j<480;j++){
      for(i=0;i<640;i++){
	idx = (i*2+20)+(j*2+20)*CHIPWIDTH;
	if(idx + CHIPWIDTH+1 < CHIPWIDTH*CHIPHEIGHT){
	  // this is where the max stuff has to go.
	  pixvalue = (unsigned char) MAX( MAX(buffer[idx],buffer[idx+1]), MAX(buffer[idx+CHIPWIDTH], buffer[idx+1+CHIPWIDTH]));
	  //	  pixvalue = (unsigned char) (((int)
	  //	  buffer[idx]+buffer[idx+1]+buffer[idx+CHIPWIDTH]+buffer[idx+CHIPWIDTH+1])/4.);
	  // before Ft Sumner
	   VideoBuffer[i+j*640] = VPalette[pixvalue];
	  // at Ft Sumner
	  //	  VideoBuffer[(639-i)+(479-j)*640] = VPalette[pixvalue];

		//	VideoBuffer[i+j*640] = i*j*256;
		//	printf("GOT HERE! %d\n",VideoBuffer[i+j*640] );
      	};
    };
    };
    
    
    gl_putbox(0,0,640,480,(void *) VideoBuffer);
    gl_drawDiamond(620,20,10,Color::Green);
    //    DrawCircle(756,328,90,Color::Yellow, true);
    DrawCircle(806,641,90,Color::Blue, true);
    //    gl_circle(320,200,20,16777200);
    blobs = blob.getblobs();

    //    WriteToLog("Display","Numblobs = %d",blob.get_numblobs());

    currentblob = 0;
    selectedblob = cam->getTargetBlob();
     while(blobs!=NULL && currentblob<90){
      //if(blobs!=NULL){
      xbl = blobs->getx();
      ybl = blobs->gety();
      if(ybl<1000 && xbl >25 && ybl> 25 && xbl < 1330){
      if(currentblob == selectedblob){
	//before fort sumner
		DrawDiamond((unsigned short) xbl, (unsigned short) ybl, 25,Color::Orange, true);
	//at fort sumner
	//DrawDiamond((unsigned short) (1359-xbl), (unsigned short) (1035-ybl), 25,Color::Orange, true);
      } else {
	//before fort sumner
	DrawCircle((unsigned short) xbl, (unsigned short) ybl, 25,Color::Blue, true);
	//at fort sumner
	//DrawCircle((unsigned short) (1359-xbl), (unsigned short) (1035-ybl), 25,Color::Blue, true);

      };
      };
      //      gl_printf((unsigned short) xbl, (unsigned short) ybl, "%d",currentblob);
      blobs = blobs->getnextblob();
      currentblob++;
      }
    
    switch(modeID){
    case NOMODE:{
      break;
    };
    case INITMODE:{
      gl_printf(10,30,"ET = %6dus",cam->getExpT());
      gl_printf(10,50,"TT = %6dms",cam->getTrigT());
      gl_printf(10,70,"LVDT -> %6.3f ",leakylvdt/409.6);
      break;
    };
    case SLEWINGMODE:{
      break;
    };
    case POINTINGMODE:{
      DrawSquare(cam->getWinX(), cam->getWinY(), cam->getWinDX(),Color::Blue, true);
      DrawCross(cam->pointingTrackPointX,cam->pointingTrackPointY, 20, Color::Yellow, true);
      gl_printf(10,30,"SM%d",cam->getSubModeID());
      break;
    };
    case ERRORMOD:{
      break;
    };
    case ALIGNMENTMODE:{
      //      gl_printf(6,320,"DTU PE:");
      //      gl_printf(10,333,"EL = %.02f\"   ",alignmentMD.DTUpeEL);
      //      gl_printf(10,346,"CE = %.02f\"   ",alignmentMD.DTUpeCE);
      //      gl_printf(6,360,"calc:");
      gl_printf(10,400,"EL = %.02fpx   ",alignmentMD.centY);
      gl_printf(10,415,"CE = %.02fpx   ",alignmentMD.centX);
      //      gl_printf(10,403,"Drms = %.02f\"   ",alignmentMD.rsq); // RMS not valid
      gl_printf(20,30,"SM(%d)", alignmentMD.submodeID);
      alignmentMD.winx = cam->getWinX();
      alignmentMD.winy = cam->getWinY();
      alignmentMD.wind = cam->getWinDX();
      gl_printf(380,10,"ET = %6dus",cam->getExpT());
      gl_printf(380,30,"TT = %6dms",cam->getTrigT());
      gl_printf(380,50,"LVDT -> %6.3f ",leakylvdt/409.6);
      DrawSquare(alignmentMD.winx, alignmentMD.winy, alignmentMD.wind, Color::Blue, true);
      DrawDiamond(trackpointCE, trackpointEL,35,  Color::Green, true);

      if(autocollimationMD.zoom){
	
	//maxx = 640; 
	//	maxy = 480;
	

	maxx = (short) autocollimationMD.xpos;
	maxy = (short) autocollimationMD.ypos;

	gl_drawSquare(520,340,112,Color::Green);
	for(i=-18;i<19;i++){
	  for(j=-18;j<19;j++){
	    
	    if(maxx+j<dx*1.0 && maxy+i<dy*1.0 && maxy+i>=0.0 && maxx+j>=0.0){
	      val = VPalette[buffer[maxx+j +(maxy+i)*dx]];
	    } else {
	      val = 32;
	    };
	    gl_drawSquare(520+j*6,340+i*6,3,val);
	    gl_drawSquare(520+j*6,340+i*6,2,val);
	    gl_drawSquare(520+j*6,340+i*6,1,val);
	    gl_drawSquare(520+j*6,340+i*6,0,val);

	  };
	};
      };

      break;
    };
    case AUTOCOLLIMATIONMODE:{
      	maxx = (short) autocollimationMD.xpos;
      	maxy = (short) autocollimationMD.ypos;
      //	gl_printf(10,30,"MAX X -> %f",maxx);
      //	gl_printf(10,45,"MAX Y -> %f",maxy);
      //	gl_printf(10,60,"RMS R -> %f",autocollimationMD.rmsr);
	gl_printf(10,30,"ET -> %d us",cam->getExpT());
	gl_printf(10,50,"TT -> %d ms",cam->getTrigT());
	gl_printf(10,70,"LVDT -> %6.3f ",leakylvdt/409.6);
	
      if(autocollimationMD.zoom){

	//maxx = 640; 
	//maxy = 480;

	gl_drawSquare(520,340,112,Color::Green);
	for(i=-18;i<19;i++){
	  for(j=-18;j<19;j++){
	    
	    if(maxx+j<dx*1.0 && maxy+i<dy*1.0 && maxy+i>=0.0 && maxx+j>=0.0){
	      val = VPalette[buffer[maxx+j +(maxy+i)*dx]];
	    } else {
	      val = 32;
	    };
	    gl_drawSquare(520+j*6,340+i*6,3,val);
	    gl_drawSquare(520+j*6,340+i*6,2,val);
	    gl_drawSquare(520+j*6,340+i*6,1,val);
	    gl_drawSquare(520+j*6,340+i*6,0,val);

	  };
	};


      };
    };
      
    };

  
  } else { 
    gl_drawDiamond(620,20,10,Color::Red);
    gl_printf(612,37,"02d",error);
    WriteToLog("display","Error %d occured. This is error #%d", error, errorcount++);
    FlushLog();       
  };

  gl_printf(10,10,"%s",modeName[modeID]);
  static unsigned long frm;
  frm = cam->onlyGetFrame();
  //  WriteToLog("display","Full Chip Frame # %ld",frm);
  gl_printf(100,10,"%7ld",frm);

  if(!displayMD.modeMismatch){
    gl_drawSquare(620,70,10, Color::Green);
  } else {
    gl_drawDiamond(620,70,10, Color::Red);
  };
  if(!displayMD.sensorMismatch){
    gl_drawSquare(620,120,10, Color::Green);
  } else {
    gl_drawDiamond(620,120,10, Color::Red);
  };





  //  DrawCircle(636,296,15,Color::Cyan,true);



  gl_copyscreen(PhysicalScreen);

  

  

  //  printf("I put a box\n");

  
  return;
};



/*************************************************************************/

void gl_drawSquare(unsigned short x, unsigned short y, unsigned short sz, unsigned int color){
    gl_hline(x,y,x+sz, color);
    gl_line(x, y, x, y+sz, color);
    gl_line(x+sz,y, x+sz, y+sz, color);
    gl_hline(x,y+sz, x+sz, color);
  };

  return; 
};


void TestColors(){
  gl_drawRectangle(10,15,30,5,Color::Red);
  gl_drawRectangle(20,35,30,5,Color::Blue);
  gl_drawRectangle(30,55,30,5,Color::Green);
  gl_drawRectangle(40,75,30,5,Color::Yellow);
  gl_drawRectangle(50,95,30,5,Color::Magenta);
  gl_drawRectangle(60,115,30,5,Color::Orange);
  gl_drawRectangle(70,135,30,5,Color::White);
  gl_drawRectangle(80,155,30,5,Color::Cyan);
  gl_copyscreen(PhysicalScreen);
};


void gl_drawRectangle(unsigned short x, unsigned short y, unsigned short dx, unsigned short dy, unsigned int color){
      gl_hline(x,y,x+dx, color);
      gl_hline(x,y+dy, x+dx, color);
      gl_line(x+dx, y, x+dx, y+dy, color);
      gl_line(x,y, x, y+dy, color);
  };
  return; 
};

void DrawCircle(unsigned short x, unsigned short y, unsigned short r, unsigned int color, bool offset){
      gl_circle(x,y,r,(int)color);
};

void SetVPalette(unsigned char Br, unsigned char Ct, unsigned char Ga){
  static int i;
  static float floati;
  static unsigned char val;
  //  printf("%d %d %d\n",Br,Ct,Ga);
  for(i=0;i<255;i++){
    floati = (float) i;
    floati = 3.984375 * (float)Ct * pow(floati/256., (float)Ga/128.)+ ((float)Br-128.)/2.;
    if(floati < 0) floati = 0;
    if(floati > 255) floati = 255;
    val = (unsigned char) floor(floati+0.5);
    //printf("%d %d\n",i,val);
    VPalette[i] = (1+256+256*256) * val;
  };
  return;
};


int gl_gray(unsigned char gry){
  return (gry + 256*gry + 256*256*gry);
};
	
  void ClearScreen(){
    gl_clearscreen(0);
  };

